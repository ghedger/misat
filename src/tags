!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARRAY_LEN	../include/common.h	91;"	d
AUDIO_DETECT	../include/common.h	/^} AUDIO_DETECT ;$/;"	t	typeref:struct:__anon16
AddPages	../include/Experimental.h	/^   extern void AddPages(   AudacityProject * pProj, GuiFactory & Factory,  wxNotebook  * pNotebook );$/;"	p	signature:( AudacityProject * pProj, GuiFactory & Factory, wxNotebook * pNotebook )
AudioFile	../include/audiofile.h	/^     AudioFile()$/;"	f	class:AudioFile	access:public	signature:()
AudioFile	../include/audiofile.h	/^class AudioFile {$/;"	c
AudioFile::AudioFile	../include/audiofile.h	/^     AudioFile()$/;"	f	class:AudioFile	access:public	signature:()
AudioFile::_bitsPerSample	../include/audiofile.h	/^    unsigned int _bitsPerSample;$/;"	m	class:AudioFile	access:protected
AudioFile::_channelTot	../include/audiofile.h	/^    unsigned int _channelTot;$/;"	m	class:AudioFile	access:protected
AudioFile::_data	../include/audiofile.h	/^    SAMPLETYPE *_data;$/;"	m	class:AudioFile	access:protected
AudioFile::_format	../include/audiofile.h	/^    unsigned int _format;$/;"	m	class:AudioFile	access:protected
AudioFile::_len	../include/audiofile.h	/^    unsigned int _len;$/;"	m	class:AudioFile	access:protected
AudioFile::_rate	../include/audiofile.h	/^    unsigned int _rate;$/;"	m	class:AudioFile	access:protected
AudioFile::_sampleTot	../include/audiofile.h	/^    unsigned int _sampleTot;$/;"	m	class:AudioFile	access:protected
AudioFile::extractData	../include/audiofile.h	/^    void extractData(IFFDigest& iff, IFFChunkIterator i);$/;"	p	class:AudioFile	access:public	signature:(IFFDigest& iff, IFFChunkIterator i)
AudioFile::extractHeader	../include/audiofile.h	/^    void extractHeader(IFFDigest& iff, IFFChunkIterator i);$/;"	p	class:AudioFile	access:public	signature:(IFFDigest& iff, IFFChunkIterator i)
AudioFile::getBuffer	../include/audiofile.h	/^    SAMPLETYPE *getBuffer() { return _data; }$/;"	f	class:AudioFile	access:public	signature:()
AudioFile::getPowerOf2Ceiling	../include/audiofile.h	/^    unsigned int getPowerOf2Ceiling(unsigned int val);$/;"	p	class:AudioFile	access:protected	signature:(unsigned int val)
AudioFile::getSampleTot	../include/audiofile.h	/^    unsigned int getSampleTot() { return _sampleTot; }$/;"	f	class:AudioFile	access:public	signature:()
AudioFile::load	../include/audiofile.h	/^    void load(const char *);$/;"	p	class:AudioFile	access:public	signature:(const char *)
AudioFile::~AudioFile	../include/audiofile.h	/^    ~AudioFile()$/;"	f	class:AudioFile	access:public	signature:()
BITWIDTH2BYTES	../include/common.h	83;"	d
BitReversed	../include/RealFFTf.h	/^   int *BitReversed;$/;"	m	struct:FFTParamType	access:public
CHAR	../include/globals.h	/^typedef char CHAR;$/;"	t
CleanupFFT	../include/RealFFTf.h	/^void CleanupFFT();$/;"	p	signature:()
CleanupFFT1x	../include/RealFFTf48x.h	/^void CleanupFFT1x();$/;"	p	signature:()
DeinitFFT	../include/FFT.h	/^void DeinitFFT();$/;"	p	signature:()
EXPERIMENTAL_FEATURES	../include/Experimental.h	122;"	d
EXPERIMENTAL_FULL_WASAPI	../include/Experimental.h	39;"	d
EXPERIMENTAL_KEY_VIEW	../include/Experimental.h	46;"	d
EXPERIMENTAL_SYNC_LOCK	../include/Experimental.h	49;"	d
EXPERIMENTAL_USE_REALFFTF	../include/Experimental.h	107;"	d
EndFFT	../include/RealFFTf.h	/^void EndFFT(HFFT);$/;"	p	signature:(HFFT)
EndFFT1x	../include/RealFFTf48x.h	/^void EndFFT1x(HFFT);$/;"	p	signature:(HFFT)
FFT	../include/FFT.h	/^void FFT(int NumSamples,$/;"	p	signature:(int NumSamples, bool InverseTransform, float *RealIn, float *ImagIn, float *RealOut, float *ImagOut)
FFTParam	../include/RealFFTf.h	/^} FFTParam;$/;"	t	typeref:struct:FFTParamType
FFTParamType	../include/RealFFTf.h	/^typedef struct FFTParamType {$/;"	s
FFTParamType::BitReversed	../include/RealFFTf.h	/^   int *BitReversed;$/;"	m	struct:FFTParamType	access:public
FFTParamType::Points	../include/RealFFTf.h	/^   int Points;$/;"	m	struct:FFTParamType	access:public
FFTParamType::SinTable	../include/RealFFTf.h	/^   fft_type *SinTable;$/;"	m	struct:FFTParamType	access:public
FFTParamType::pow2Bits	../include/RealFFTf.h	/^   int pow2Bits;$/;"	m	struct:FFTParamType	access:public
GetFFT	../include/RealFFTf.h	/^HFFT GetFFT(int);$/;"	p	signature:(int)
GetFFT1x	../include/RealFFTf48x.h	/^HFFT GetFFT1x(int);$/;"	p	signature:(int)
HFFT	../include/RealFFTf.h	13;"	d
IFFChunk	../include/iffdigest.h	/^        IFFChunk(const IFFChunk& ck);$/;"	p	class:IFFChunk	access:public	signature:(const IFFChunk& ck)
IFFChunk	../include/iffdigest.h	/^        IFFChunk(unsigned int id, IFFChunkList sc)$/;"	f	class:IFFChunk	access:public	signature:(unsigned int id, IFFChunkList sc)
IFFChunk	../include/iffdigest.h	/^        IFFChunk(unsigned int id, const char* d, unsigned int l)$/;"	f	class:IFFChunk	access:public	signature:(unsigned int id, const char* d, unsigned int l)
IFFChunk	../include/iffdigest.h	/^class IFFChunk {$/;"	c
IFFChunk::IFFChunk	../include/iffdigest.h	/^        IFFChunk(const IFFChunk& ck);$/;"	p	class:IFFChunk	access:public	signature:(const IFFChunk& ck)
IFFChunk::IFFChunk	../include/iffdigest.h	/^        IFFChunk(unsigned int id, IFFChunkList sc)$/;"	f	class:IFFChunk	access:public	signature:(unsigned int id, IFFChunkList sc)
IFFChunk::IFFChunk	../include/iffdigest.h	/^        IFFChunk(unsigned int id, const char* d, unsigned int l)$/;"	f	class:IFFChunk	access:public	signature:(unsigned int id, const char* d, unsigned int l)
IFFChunk::IFF_CHUNK_DATA	../include/iffdigest.h	/^        enum { IFF_CHUNK_DATA, IFF_CHUNK_LIST } ctype;$/;"	e	enum:IFFChunk::__anon1
IFFChunk::IFF_CHUNK_LIST	../include/iffdigest.h	/^        enum { IFF_CHUNK_DATA, IFF_CHUNK_LIST } ctype;$/;"	e	enum:IFFChunk::__anon1
IFFChunk::ck_begin	../include/iffdigest.h	/^        inline IFFChunkIterator ck_begin() { return subchunks.begin(); }$/;"	f	class:IFFChunk	access:public	signature:()
IFFChunk::ck_end	../include/iffdigest.h	/^        inline IFFChunkIterator ck_end() { return subchunks.end(); }$/;"	f	class:IFFChunk	access:public	signature:()
IFFChunk::ck_find	../include/iffdigest.h	/^        inline IFFChunkIterator ck_find(iff_ckid_t id) { return subchunks.findChunk(id); }$/;"	f	class:IFFChunk	access:public	signature:(iff_ckid_t id)
IFFChunk::ck_findNext	../include/iffdigest.h	/^        inline IFFChunkIterator ck_findNext(IFFChunkIterator i, iff_ckid_t id) { return subchunks.findNextChunk(i, id); }$/;"	f	class:IFFChunk	access:public	signature:(IFFChunkIterator i, iff_ckid_t id)
IFFChunk::ckid	../include/iffdigest.h	/^        iff_ckid_t ckid;$/;"	m	class:IFFChunk	access:protected
IFFChunk::ctype	../include/iffdigest.h	/^        enum { IFF_CHUNK_DATA, IFF_CHUNK_LIST } ctype;$/;"	m	class:IFFChunk	typeref:enum:IFFChunk::__anon1	access:protected
IFFChunk::data	../include/iffdigest.h	/^        const char* data;$/;"	m	class:IFFChunk	access:protected
IFFChunk::dataPtr	../include/iffdigest.h	/^        const char* dataPtr() const { return data; }$/;"	f	class:IFFChunk	access:public	signature:() const
IFFChunk::id	../include/iffdigest.h	/^        iff_ckid_t id() const { return ckid; }$/;"	f	class:IFFChunk	access:public	signature:() const
IFFChunk::id_str	../include/iffdigest.h	/^        const char* id_str() const { return (const char*)(&ckid); }$/;"	f	class:IFFChunk	access:public	signature:() const
IFFChunk::len	../include/iffdigest.h	/^        unsigned int len() const { return length; }$/;"	f	class:IFFChunk	access:public	signature:() const
IFFChunk::length	../include/iffdigest.h	/^        unsigned int length;$/;"	m	class:IFFChunk	access:protected
IFFChunk::operator !=	../include/iffdigest.h	/^        inline bool operator!=(const char* id) const { return ckid!=iff_ckid(id); }$/;"	f	class:IFFChunk	access:public	signature:(const char* id) const
IFFChunk::operator !=	../include/iffdigest.h	/^        inline bool operator!=(iff_ckid_t id) const { return ckid!=id; }$/;"	f	class:IFFChunk	access:public	signature:(iff_ckid_t id) const
IFFChunk::operator =	../include/iffdigest.h	/^        void operator=(const IFFChunk& ck);$/;"	p	class:IFFChunk	access:public	signature:(const IFFChunk& ck)
IFFChunk::operator ==	../include/iffdigest.h	/^        inline bool operator==(const char* id) const { return ckid==iff_ckid(id); }$/;"	f	class:IFFChunk	access:public	signature:(const char* id) const
IFFChunk::operator ==	../include/iffdigest.h	/^        inline bool operator==(iff_ckid_t id) const { return ckid==id; }$/;"	f	class:IFFChunk	access:public	signature:(iff_ckid_t id) const
IFFChunk::subchunks	../include/iffdigest.h	/^        IFFChunkList subchunks;$/;"	m	class:IFFChunk	access:protected
IFFChunk::tnull	../include/iffdigest.h	/^        char tnull; \/\/ terminating null for id$/;"	m	class:IFFChunk	access:protected
IFFChunkIterator	../include/iffdigest.h	/^typedef std::list<IFFChunk>::iterator IFFChunkIterator;$/;"	t
IFFChunkList	../include/iffdigest.h	/^class IFFChunkList: public list<IFFChunk> {$/;"	c	inherits:list
IFFChunkList::findChunk	../include/iffdigest.h	/^        IFFChunkIterator findChunk(iff_ckid_t ckid);$/;"	p	class:IFFChunkList	access:public	signature:(iff_ckid_t ckid)
IFFChunkList::findNextChunk	../include/iffdigest.h	/^        IFFChunkIterator findNextChunk(IFFChunkIterator from, iff_ckid_t ckid);$/;"	p	class:IFFChunkList	access:public	signature:(IFFChunkIterator from, iff_ckid_t ckid)
IFFDigest	../include/iffdigest.h	/^        IFFDigest(const char* data, unsigned int dlen);$/;"	p	class:IFFDigest	access:public	signature:(const char* data, unsigned int dlen)
IFFDigest	../include/iffdigest.h	/^class IFFDigest {$/;"	c
IFFDigest::IFFDigest	../include/iffdigest.h	/^        IFFDigest(const char* data, unsigned int dlen);$/;"	p	class:IFFDigest	access:public	signature:(const char* data, unsigned int dlen)
IFFDigest::chunks	../include/iffdigest.h	/^        IFFChunkList chunks;$/;"	m	class:IFFDigest	access:protected
IFFDigest::ck_begin	../include/iffdigest.h	/^        inline IFFChunkIterator ck_begin() { return chunks.begin(); }$/;"	f	class:IFFDigest	access:public	signature:()
IFFDigest::ck_end	../include/iffdigest.h	/^        inline IFFChunkIterator ck_end() { return chunks.end(); }$/;"	f	class:IFFDigest	access:public	signature:()
IFFDigest::ck_find	../include/iffdigest.h	/^        inline IFFChunkIterator ck_find(iff_ckid_t id) { return chunks.findChunk(id); }$/;"	f	class:IFFDigest	access:public	signature:(iff_ckid_t id)
IFFDigest::ck_findNext	../include/iffdigest.h	/^        inline IFFChunkIterator ck_findNext(IFFChunkIterator i, iff_ckid_t id) { return chunks.findNextChunk(i, id); }$/;"	f	class:IFFDigest	access:public	signature:(IFFChunkIterator i, iff_ckid_t id)
IFFDigest::contents	../include/iffdigest.h	/^        const char* contents;$/;"	m	class:IFFDigest	access:protected
IFFDigest::fid	../include/iffdigest.h	/^        iff_ckid_t fid;$/;"	m	class:IFFDigest	access:protected
IFFDigest::ftype	../include/iffdigest.h	/^        enum IFFFormat ftype;$/;"	m	class:IFFDigest	typeref:enum:IFFDigest::IFFFormat	access:protected
IFFDigest::id	../include/iffdigest.h	/^        inline iff_ckid_t id() const { return fid; }$/;"	f	class:IFFDigest	access:public	signature:() const
IFFDigest::id_str	../include/iffdigest.h	/^        inline const char* id_str() const { return (const char*)(&fid); }$/;"	f	class:IFFDigest	access:public	signature:() const
IFFDigest::iffvariant	../include/iffdigest.h	/^        inline enum IFFFormat iffvariant() const { return ftype; }$/;"	f	class:IFFDigest	access:public	signature:() const
IFFDigest::tnull	../include/iffdigest.h	/^        char tnull;$/;"	m	class:IFFDigest	access:protected
IFFDigest::valid	../include/iffdigest.h	/^        inline bool valid() const { return ftype != IFF_FMT_ERROR; }$/;"	f	class:IFFDigest	access:public	signature:() const
IFFFormat	../include/iffdigest.h	/^enum IFFFormat { IFF_FMT_IFF85, IFF_FMT_RIFF, IFF_FMT_ERROR };$/;"	g
IFF_CHUNK_DATA	../include/iffdigest.h	/^        enum { IFF_CHUNK_DATA, IFF_CHUNK_LIST } ctype;$/;"	e	enum:IFFChunk::__anon1
IFF_CHUNK_LIST	../include/iffdigest.h	/^        enum { IFF_CHUNK_DATA, IFF_CHUNK_LIST } ctype;$/;"	e	enum:IFFChunk::__anon1
IFF_FMT_ERROR	../include/iffdigest.h	/^enum IFFFormat { IFF_FMT_IFF85, IFF_FMT_RIFF, IFF_FMT_ERROR };$/;"	e	enum:IFFFormat
IFF_FMT_IFF85	../include/iffdigest.h	/^enum IFFFormat { IFF_FMT_IFF85, IFF_FMT_RIFF, IFF_FMT_ERROR };$/;"	e	enum:IFFFormat
IFF_FMT_RIFF	../include/iffdigest.h	/^enum IFFFormat { IFF_FMT_IFF85, IFF_FMT_RIFF, IFF_FMT_ERROR };$/;"	e	enum:IFFFormat
InitializeFFT	../include/RealFFTf.h	/^HFFT InitializeFFT(int);$/;"	p	signature:(int)
InitializeFFT1x	../include/RealFFTf48x.h	/^HFFT InitializeFFT1x(int);$/;"	p	signature:(int)
InverseRealFFT	../include/FFT.h	/^void InverseRealFFT(int NumSamples,$/;"	p	signature:(int NumSamples, float *RealIn, float *ImagIn, float *RealOut)
InverseRealFFTf	../include/RealFFTf.h	/^void InverseRealFFTf(fft_type *,HFFT);$/;"	p	signature:(fft_type *,HFFT)
InverseRealFFTf1x	../include/RealFFTf48x.h	/^void InverseRealFFTf1x(fft_type *,HFFT);$/;"	p	signature:(fft_type *,HFFT)
InverseRealFFTf4x	../include/RealFFTf48x.h	/^void InverseRealFFTf4x(fft_type *,HFFT);$/;"	p	signature:(fft_type *,HFFT)
M_PI	../include/FFT.h	46;"	d
Magick	../include/common.h	/^	int				Magick ;$/;"	m	struct:sf_private_tag	access:public
NOT	../include/common.h	93;"	d
NumWindowFuncs	../include/FFT.h	/^int NumWindowFuncs();$/;"	p	signature:()
PEAK_INFO	../include/common.h	/^} PEAK_INFO ;$/;"	t	typeref:struct:__anon5
PEAK_POS	../include/common.h	/^} PEAK_POS ;$/;"	t	typeref:struct:__anon4
PRIV_CHUNK4	../include/common.h	/^} PRIV_CHUNK4 ;$/;"	t	typeref:struct:__anon14
PSF_FILE	../include/common.h	/^} PSF_FILE ;$/;"	t	typeref:struct:__anon7
PSF_SEEK_ERROR	../include/common.h	80;"	d
Points	../include/RealFFTf.h	/^   int Points;$/;"	m	struct:FFTParamType	access:public
PowerSpectrum	../include/FFT.h	/^void PowerSpectrum(int NumSamples, float *In, float *Out);$/;"	p	signature:(int NumSamples, float *In, float *Out)
RealFFT	../include/FFT.h	/^void RealFFT(int NumSamples,$/;"	p	signature:(int NumSamples, float *RealIn, float *RealOut, float *ImagOut)
RealFFTf	../include/RealFFTf.h	/^void RealFFTf(fft_type *,HFFT);$/;"	p	signature:(fft_type *,HFFT)
RealFFTf1x	../include/RealFFTf48x.h	/^void RealFFTf1x(fft_type *,HFFT);$/;"	p	signature:(fft_type *,HFFT)
RealFFTf4x	../include/RealFFTf48x.h	/^void RealFFTf4x(fft_type *,HFFT);$/;"	p	signature:(fft_type *,HFFT)
ReleaseFFT	../include/RealFFTf.h	/^void ReleaseFFT(HFFT);$/;"	p	signature:(HFFT)
ReleaseFFT1x	../include/RealFFTf48x.h	/^void ReleaseFFT1x(HFFT);$/;"	p	signature:(HFFT)
ReorderToFreq	../include/RealFFTf.h	/^void ReorderToFreq(HFFT hFFT, fft_type *buffer, fft_type *RealOut, fft_type *ImagOut);$/;"	p	signature:(HFFT hFFT, fft_type *buffer, fft_type *RealOut, fft_type *ImagOut)
ReorderToFreq1x	../include/RealFFTf48x.h	/^void ReorderToFreq1x(HFFT hFFT, fft_type *buffer, fft_type *RealOut, fft_type *ImagOut);$/;"	p	signature:(HFFT hFFT, fft_type *buffer, fft_type *RealOut, fft_type *ImagOut)
ReorderToFreq4x	../include/RealFFTf48x.h	/^void ReorderToFreq4x(HFFT hFFT, fft_type *buffer, fft_type *RealOut, fft_type *ImagOut);$/;"	p	signature:(HFFT hFFT, fft_type *buffer, fft_type *RealOut, fft_type *ImagOut)
ReorderToTime	../include/RealFFTf.h	/^void ReorderToTime(HFFT hFFT, fft_type *buffer, fft_type *TimeOut);$/;"	p	signature:(HFFT hFFT, fft_type *buffer, fft_type *TimeOut)
ReorderToTime1x	../include/RealFFTf48x.h	/^void ReorderToTime1x(HFFT hFFT, fft_type *buffer, fft_type *TimeOut);$/;"	p	signature:(HFFT hFFT, fft_type *buffer, fft_type *TimeOut)
ReorderToTime4x	../include/RealFFTf48x.h	/^void ReorderToTime4x(HFFT hFFT, fft_type *buffer, fft_type *TimeOut);$/;"	p	signature:(HFFT hFFT, fft_type *buffer, fft_type *TimeOut)
SAMPLETYPE	../include/audiofile.h	/^typedef float SAMPLETYPE;$/;"	t
SFC_TEST_AIFF_ADD_INST_CHUNK	../include/common.h	/^{	SFC_TEST_AIFF_ADD_INST_CHUNK	= 0x2000,$/;"	e	enum:__anon17
SFC_TEST_WAV_ADD_INFO_CHUNK	../include/common.h	/^	SFC_TEST_WAV_ADD_INFO_CHUNK		= 0x2010$/;"	e	enum:__anon17
SFD_TYPEMASK	../include/common.h	/^	SFD_TYPEMASK		= 0x0FFFFFFF$/;"	e	enum:__anon2
SFE_AIFF_AIFF_NO_FORM	../include/common.h	/^	SFE_AIFF_AIFF_NO_FORM,$/;"	e	enum:__anon13
SFE_AIFF_BAD_COMM_CHUNK	../include/common.h	/^	SFE_AIFF_BAD_COMM_CHUNK,$/;"	e	enum:__anon13
SFE_AIFF_BAD_PEAK	../include/common.h	/^	SFE_AIFF_BAD_PEAK,$/;"	e	enum:__anon13
SFE_AIFF_COMM_CHUNK_SIZE	../include/common.h	/^	SFE_AIFF_COMM_CHUNK_SIZE,$/;"	e	enum:__anon13
SFE_AIFF_COMM_NO_FORM	../include/common.h	/^	SFE_AIFF_COMM_NO_FORM,$/;"	e	enum:__anon13
SFE_AIFF_NO_DATA	../include/common.h	/^	SFE_AIFF_NO_DATA,$/;"	e	enum:__anon13
SFE_AIFF_NO_FORM	../include/common.h	/^	SFE_AIFF_NO_FORM,$/;"	e	enum:__anon13
SFE_AIFF_NO_SSND	../include/common.h	/^	SFE_AIFF_NO_SSND,$/;"	e	enum:__anon13
SFE_AIFF_PEAK_B4_COMM	../include/common.h	/^	SFE_AIFF_PEAK_B4_COMM,$/;"	e	enum:__anon13
SFE_AIFF_RW_SSND_NOT_LAST	../include/common.h	/^	SFE_AIFF_RW_SSND_NOT_LAST,$/;"	e	enum:__anon13
SFE_AIFF_SSND_NO_COMM	../include/common.h	/^	SFE_AIFF_SSND_NO_COMM,$/;"	e	enum:__anon13
SFE_AIFF_UNKNOWN_CHUNK	../include/common.h	/^	SFE_AIFF_UNKNOWN_CHUNK,$/;"	e	enum:__anon13
SFE_AMBIGUOUS_SEEK	../include/common.h	/^	SFE_AMBIGUOUS_SEEK,$/;"	e	enum:__anon13
SFE_AU_EMBED_BAD_LEN	../include/common.h	/^	SFE_AU_EMBED_BAD_LEN,$/;"	e	enum:__anon13
SFE_AU_NO_DOTSND	../include/common.h	/^	SFE_AU_NO_DOTSND,$/;"	e	enum:__anon13
SFE_AU_UNKNOWN_FORMAT	../include/common.h	/^	SFE_AU_UNKNOWN_FORMAT,$/;"	e	enum:__anon13
SFE_BAD_BROADCAST_INFO_SIZE	../include/common.h	/^	SFE_BAD_BROADCAST_INFO_SIZE,$/;"	e	enum:__anon13
SFE_BAD_BROADCAST_INFO_TOO_BIG	../include/common.h	/^	SFE_BAD_BROADCAST_INFO_TOO_BIG,$/;"	e	enum:__anon13
SFE_BAD_COMMAND_PARAM	../include/common.h	/^	SFE_BAD_COMMAND_PARAM,$/;"	e	enum:__anon13
SFE_BAD_ENDIAN	../include/common.h	/^	SFE_BAD_ENDIAN,$/;"	e	enum:__anon13
SFE_BAD_FILE	../include/common.h	/^	SFE_BAD_FILE,$/;"	e	enum:__anon13
SFE_BAD_FILE_PTR	../include/common.h	/^	SFE_BAD_FILE_PTR,$/;"	e	enum:__anon13
SFE_BAD_FILE_READ	../include/common.h	/^	SFE_BAD_FILE_READ,$/;"	e	enum:__anon13
SFE_BAD_INT_PTR	../include/common.h	/^	SFE_BAD_INT_PTR,$/;"	e	enum:__anon13
SFE_BAD_MODE_RW	../include/common.h	/^	SFE_BAD_MODE_RW,$/;"	e	enum:__anon13
SFE_BAD_OFFSET	../include/common.h	/^	SFE_BAD_OFFSET,$/;"	e	enum:__anon13
SFE_BAD_OPEN_FORMAT	../include/common.h	/^	SFE_BAD_OPEN_FORMAT			= SF_ERR_UNRECOGNISED_FORMAT,$/;"	e	enum:__anon13
SFE_BAD_OPEN_MODE	../include/common.h	/^	SFE_BAD_OPEN_MODE,$/;"	e	enum:__anon13
SFE_BAD_READ_ALIGN	../include/common.h	/^	SFE_BAD_READ_ALIGN,$/;"	e	enum:__anon13
SFE_BAD_SEEK	../include/common.h	/^	SFE_BAD_SEEK,$/;"	e	enum:__anon13
SFE_BAD_SF_INCOMPLETE	../include/common.h	/^	SFE_BAD_SF_INCOMPLETE,$/;"	e	enum:__anon13
SFE_BAD_SF_INFO	../include/common.h	/^	SFE_BAD_SF_INFO,$/;"	e	enum:__anon13
SFE_BAD_SF_INFO_PTR	../include/common.h	/^	SFE_BAD_SF_INFO_PTR,$/;"	e	enum:__anon13
SFE_BAD_SNDFILE_PTR	../include/common.h	/^	SFE_BAD_SNDFILE_PTR,$/;"	e	enum:__anon13
SFE_BAD_STAT_SIZE	../include/common.h	/^	SFE_BAD_STAT_SIZE,$/;"	e	enum:__anon13
SFE_BAD_VIRTUAL_IO	../include/common.h	/^	SFE_BAD_VIRTUAL_IO,$/;"	e	enum:__anon13
SFE_BAD_WRITE_ALIGN	../include/common.h	/^	SFE_BAD_WRITE_ALIGN,$/;"	e	enum:__anon13
SFE_CHANNEL_COUNT	../include/common.h	/^	SFE_CHANNEL_COUNT,$/;"	e	enum:__anon13
SFE_CHANNEL_COUNT_ZERO	../include/common.h	/^	SFE_CHANNEL_COUNT_ZERO,$/;"	e	enum:__anon13
SFE_CMD_HAS_DATA	../include/common.h	/^	SFE_CMD_HAS_DATA,$/;"	e	enum:__anon13
SFE_DWVW_BAD_BITWIDTH	../include/common.h	/^	SFE_DWVW_BAD_BITWIDTH,$/;"	e	enum:__anon13
SFE_FLAC_BAD_HEADER	../include/common.h	/^	SFE_FLAC_BAD_HEADER,$/;"	e	enum:__anon13
SFE_FLAC_BAD_SAMPLE_RATE	../include/common.h	/^	SFE_FLAC_BAD_SAMPLE_RATE,$/;"	e	enum:__anon13
SFE_FLAC_INIT_DECODER	../include/common.h	/^	SFE_FLAC_INIT_DECODER,$/;"	e	enum:__anon13
SFE_FLAC_LOST_SYNC	../include/common.h	/^	SFE_FLAC_LOST_SYNC,$/;"	e	enum:__anon13
SFE_FLAC_NEW_DECODER	../include/common.h	/^	SFE_FLAC_NEW_DECODER,$/;"	e	enum:__anon13
SFE_FLAC_UNKOWN_ERROR	../include/common.h	/^	SFE_FLAC_UNKOWN_ERROR,$/;"	e	enum:__anon13
SFE_G72X_NOT_MONO	../include/common.h	/^	SFE_G72X_NOT_MONO,$/;"	e	enum:__anon13
SFE_HTK_NO_PIPE	../include/common.h	/^	SFE_HTK_NO_PIPE,$/;"	e	enum:__anon13
SFE_INTERLEAVE_MODE	../include/common.h	/^	SFE_INTERLEAVE_MODE,$/;"	e	enum:__anon13
SFE_INTERLEAVE_READ	../include/common.h	/^	SFE_INTERLEAVE_READ,$/;"	e	enum:__anon13
SFE_INTERLEAVE_SEEK	../include/common.h	/^	SFE_INTERLEAVE_SEEK,$/;"	e	enum:__anon13
SFE_INTERNAL	../include/common.h	/^	SFE_INTERNAL,$/;"	e	enum:__anon13
SFE_IRCAM_BAD_CHANNELS	../include/common.h	/^	SFE_IRCAM_BAD_CHANNELS,$/;"	e	enum:__anon13
SFE_IRCAM_NO_MARKER	../include/common.h	/^	SFE_IRCAM_NO_MARKER,$/;"	e	enum:__anon13
SFE_IRCAM_UNKNOWN_FORMAT	../include/common.h	/^	SFE_IRCAM_UNKNOWN_FORMAT,$/;"	e	enum:__anon13
SFE_MALFORMED_FILE	../include/common.h	/^	SFE_MALFORMED_FILE			= SF_ERR_MALFORMED_FILE,$/;"	e	enum:__anon13
SFE_MALLOC_FAILED	../include/common.h	/^	SFE_MALLOC_FAILED,$/;"	e	enum:__anon13
SFE_MAT4_BAD_NAME	../include/common.h	/^	SFE_MAT4_BAD_NAME,$/;"	e	enum:__anon13
SFE_MAT4_NO_SAMPLERATE	../include/common.h	/^	SFE_MAT4_NO_SAMPLERATE,$/;"	e	enum:__anon13
SFE_MAT5_BAD_ENDIAN	../include/common.h	/^	SFE_MAT5_BAD_ENDIAN,$/;"	e	enum:__anon13
SFE_MAT5_NO_BLOCK	../include/common.h	/^	SFE_MAT5_NO_BLOCK,$/;"	e	enum:__anon13
SFE_MAT5_SAMPLE_RATE	../include/common.h	/^	SFE_MAT5_SAMPLE_RATE,$/;"	e	enum:__anon13
SFE_MAX_ERROR	../include/common.h	/^	SFE_MAX_ERROR			\/* This must be last in list. *\/$/;"	e	enum:__anon13
SFE_NIST_BAD_ENCODING	../include/common.h	/^	SFE_NIST_BAD_ENCODING,$/;"	e	enum:__anon13
SFE_NIST_BAD_HEADER	../include/common.h	/^	SFE_NIST_BAD_HEADER,$/;"	e	enum:__anon13
SFE_NIST_CRLF_CONVERISON	../include/common.h	/^	SFE_NIST_CRLF_CONVERISON,$/;"	e	enum:__anon13
SFE_NOT_READMODE	../include/common.h	/^	SFE_NOT_READMODE,$/;"	e	enum:__anon13
SFE_NOT_SEEKABLE	../include/common.h	/^	SFE_NOT_SEEKABLE,$/;"	e	enum:__anon13
SFE_NOT_WRITEMODE	../include/common.h	/^	SFE_NOT_WRITEMODE,$/;"	e	enum:__anon13
SFE_NO_EMBEDDED_RDWR	../include/common.h	/^	SFE_NO_EMBEDDED_RDWR,$/;"	e	enum:__anon13
SFE_NO_EMBED_SUPPORT	../include/common.h	/^	SFE_NO_EMBED_SUPPORT,$/;"	e	enum:__anon13
SFE_NO_ERROR	../include/common.h	/^{	SFE_NO_ERROR				= SF_ERR_NO_ERROR,$/;"	e	enum:__anon13
SFE_NO_PIPE_WRITE	../include/common.h	/^	SFE_NO_PIPE_WRITE,$/;"	e	enum:__anon13
SFE_OPEN_FAILED	../include/common.h	/^	SFE_OPEN_FAILED,$/;"	e	enum:__anon13
SFE_OPEN_PIPE_RDWR	../include/common.h	/^	SFE_OPEN_PIPE_RDWR,$/;"	e	enum:__anon13
SFE_PAF_NO_MARKER	../include/common.h	/^	SFE_PAF_NO_MARKER,$/;"	e	enum:__anon13
SFE_PAF_SHORT_HEADER	../include/common.h	/^	SFE_PAF_SHORT_HEADER,$/;"	e	enum:__anon13
SFE_PAF_UNKNOWN_FORMAT	../include/common.h	/^	SFE_PAF_UNKNOWN_FORMAT,$/;"	e	enum:__anon13
SFE_PAF_VERSION	../include/common.h	/^	SFE_PAF_VERSION,$/;"	e	enum:__anon13
SFE_PVF_BAD_BITWIDTH	../include/common.h	/^	SFE_PVF_BAD_BITWIDTH,$/;"	e	enum:__anon13
SFE_PVF_BAD_HEADER	../include/common.h	/^	SFE_PVF_BAD_HEADER,$/;"	e	enum:__anon13
SFE_PVF_NO_PVF1	../include/common.h	/^	SFE_PVF_NO_PVF1,$/;"	e	enum:__anon13
SFE_RAW_BAD_BITWIDTH	../include/common.h	/^	SFE_RAW_BAD_BITWIDTH,$/;"	e	enum:__anon13
SFE_RAW_BAD_FORMAT	../include/common.h	/^	SFE_RAW_BAD_FORMAT,$/;"	e	enum:__anon13
SFE_RAW_READ_BAD_SPEC	../include/common.h	/^	SFE_RAW_READ_BAD_SPEC,$/;"	e	enum:__anon13
SFE_RDWR_BAD_HEADER	../include/common.h	/^	SFE_RDWR_BAD_HEADER,$/;"	e	enum:__anon13
SFE_RDWR_POSITION	../include/common.h	/^	SFE_RDWR_POSITION,$/;"	e	enum:__anon13
SFE_RF64_NOT_RF64	../include/common.h	/^	SFE_RF64_NOT_RF64,$/;"	e	enum:__anon13
SFE_SD2_BAD_DATA_LENGTH	../include/common.h	/^	SFE_SD2_BAD_DATA_LENGTH,$/;"	e	enum:__anon13
SFE_SD2_BAD_DATA_OFFSET	../include/common.h	/^	SFE_SD2_BAD_DATA_OFFSET,$/;"	e	enum:__anon13
SFE_SD2_BAD_MAP_LENGTH	../include/common.h	/^	SFE_SD2_BAD_MAP_LENGTH,$/;"	e	enum:__anon13
SFE_SD2_BAD_MAP_OFFSET	../include/common.h	/^	SFE_SD2_BAD_MAP_OFFSET,$/;"	e	enum:__anon13
SFE_SD2_BAD_RSRC	../include/common.h	/^	SFE_SD2_BAD_RSRC,$/;"	e	enum:__anon13
SFE_SD2_BAD_SAMPLE_SIZE	../include/common.h	/^	SFE_SD2_BAD_SAMPLE_SIZE,$/;"	e	enum:__anon13
SFE_SD2_FD_DISALLOWED	../include/common.h	/^	SFE_SD2_FD_DISALLOWED,$/;"	e	enum:__anon13
SFE_SDS_BAD_BIT_WIDTH	../include/common.h	/^	SFE_SDS_BAD_BIT_WIDTH,$/;"	e	enum:__anon13
SFE_SDS_NOT_SDS	../include/common.h	/^	SFE_SDS_NOT_SDS,$/;"	e	enum:__anon13
SFE_SEEK_FAILED	../include/common.h	/^	SFE_SEEK_FAILED,$/;"	e	enum:__anon13
SFE_STR_BAD_STRING	../include/common.h	/^	SFE_STR_BAD_STRING,$/;"	e	enum:__anon13
SFE_STR_BAD_TYPE	../include/common.h	/^	SFE_STR_BAD_TYPE,$/;"	e	enum:__anon13
SFE_STR_MAX_COUNT	../include/common.h	/^	SFE_STR_MAX_COUNT,$/;"	e	enum:__anon13
SFE_STR_MAX_DATA	../include/common.h	/^	SFE_STR_MAX_DATA,$/;"	e	enum:__anon13
SFE_STR_NOT_WRITE	../include/common.h	/^	SFE_STR_NOT_WRITE,$/;"	e	enum:__anon13
SFE_STR_NO_ADD_END	../include/common.h	/^	SFE_STR_NO_ADD_END,$/;"	e	enum:__anon13
SFE_STR_NO_SUPPORT	../include/common.h	/^	SFE_STR_NO_SUPPORT,$/;"	e	enum:__anon13
SFE_STR_WEIRD	../include/common.h	/^	SFE_STR_WEIRD,$/;"	e	enum:__anon13
SFE_SVX_BAD_COMP	../include/common.h	/^	SFE_SVX_BAD_COMP,$/;"	e	enum:__anon13
SFE_SVX_BAD_NAME_LENGTH	../include/common.h	/^	SFE_SVX_BAD_NAME_LENGTH,$/;"	e	enum:__anon13
SFE_SVX_NO_BODY	../include/common.h	/^	SFE_SVX_NO_BODY,$/;"	e	enum:__anon13
SFE_SVX_NO_DATA	../include/common.h	/^	SFE_SVX_NO_DATA,$/;"	e	enum:__anon13
SFE_SVX_NO_FORM	../include/common.h	/^	SFE_SVX_NO_FORM,$/;"	e	enum:__anon13
SFE_SYSTEM	../include/common.h	/^	SFE_SYSTEM					= SF_ERR_SYSTEM,$/;"	e	enum:__anon13
SFE_UNIMPLEMENTED	../include/common.h	/^	SFE_UNIMPLEMENTED,$/;"	e	enum:__anon13
SFE_UNKNOWN_FORMAT	../include/common.h	/^	SFE_UNKNOWN_FORMAT,$/;"	e	enum:__anon13
SFE_UNSUPPORTED_ENCODING	../include/common.h	/^	SFE_UNSUPPORTED_ENCODING	= SF_ERR_UNSUPPORTED_ENCODING,$/;"	e	enum:__anon13
SFE_VOC_BAD_FORMAT	../include/common.h	/^	SFE_VOC_BAD_FORMAT,$/;"	e	enum:__anon13
SFE_VOC_BAD_MARKER	../include/common.h	/^	SFE_VOC_BAD_MARKER,$/;"	e	enum:__anon13
SFE_VOC_BAD_SECTIONS	../include/common.h	/^	SFE_VOC_BAD_SECTIONS,$/;"	e	enum:__anon13
SFE_VOC_BAD_VERSION	../include/common.h	/^	SFE_VOC_BAD_VERSION,$/;"	e	enum:__anon13
SFE_VOC_MULTI_PARAM	../include/common.h	/^	SFE_VOC_MULTI_PARAM,$/;"	e	enum:__anon13
SFE_VOC_MULTI_SAMPLERATE	../include/common.h	/^	SFE_VOC_MULTI_SAMPLERATE,$/;"	e	enum:__anon13
SFE_VOC_MULTI_SECTION	../include/common.h	/^	SFE_VOC_MULTI_SECTION,$/;"	e	enum:__anon13
SFE_VOC_NO_CREATIVE	../include/common.h	/^	SFE_VOC_NO_CREATIVE,$/;"	e	enum:__anon13
SFE_VOC_NO_PIPE	../include/common.h	/^	SFE_VOC_NO_PIPE,$/;"	e	enum:__anon13
SFE_VOC_SECTION_COUNT	../include/common.h	/^	SFE_VOC_SECTION_COUNT,$/;"	e	enum:__anon13
SFE_VORBIS_ENCODER_BUG	../include/common.h	/^	SFE_VORBIS_ENCODER_BUG,$/;"	e	enum:__anon13
SFE_W64_64_BIT	../include/common.h	/^	SFE_W64_64_BIT,$/;"	e	enum:__anon13
SFE_W64_ADPCM_CHANNELS	../include/common.h	/^	SFE_W64_ADPCM_CHANNELS,$/;"	e	enum:__anon13
SFE_W64_ADPCM_NOT4BIT	../include/common.h	/^	SFE_W64_ADPCM_NOT4BIT,$/;"	e	enum:__anon13
SFE_W64_GSM610_FORMAT	../include/common.h	/^	SFE_W64_GSM610_FORMAT,$/;"	e	enum:__anon13
SFE_W64_NO_DATA	../include/common.h	/^	SFE_W64_NO_DATA,$/;"	e	enum:__anon13
SFE_W64_NO_RIFF	../include/common.h	/^	SFE_W64_NO_RIFF,$/;"	e	enum:__anon13
SFE_W64_NO_WAVE	../include/common.h	/^	SFE_W64_NO_WAVE,$/;"	e	enum:__anon13
SFE_WAV_ADPCM_CHANNELS	../include/common.h	/^	SFE_WAV_ADPCM_CHANNELS,$/;"	e	enum:__anon13
SFE_WAV_ADPCM_NOT4BIT	../include/common.h	/^	SFE_WAV_ADPCM_NOT4BIT,$/;"	e	enum:__anon13
SFE_WAV_BAD_BLOCKALIGN	../include/common.h	/^	SFE_WAV_BAD_BLOCKALIGN,$/;"	e	enum:__anon13
SFE_WAV_BAD_FACT	../include/common.h	/^	SFE_WAV_BAD_FACT,$/;"	e	enum:__anon13
SFE_WAV_BAD_FMT	../include/common.h	/^	SFE_WAV_BAD_FMT,$/;"	e	enum:__anon13
SFE_WAV_BAD_FORMAT	../include/common.h	/^	SFE_WAV_BAD_FORMAT,$/;"	e	enum:__anon13
SFE_WAV_BAD_LIST	../include/common.h	/^	SFE_WAV_BAD_LIST,$/;"	e	enum:__anon13
SFE_WAV_BAD_PEAK	../include/common.h	/^	SFE_WAV_BAD_PEAK,$/;"	e	enum:__anon13
SFE_WAV_FMT_SHORT	../include/common.h	/^	SFE_WAV_FMT_SHORT,$/;"	e	enum:__anon13
SFE_WAV_GSM610_FORMAT	../include/common.h	/^	SFE_WAV_GSM610_FORMAT,$/;"	e	enum:__anon13
SFE_WAV_NO_DATA	../include/common.h	/^	SFE_WAV_NO_DATA,$/;"	e	enum:__anon13
SFE_WAV_NO_FMT	../include/common.h	/^	SFE_WAV_NO_FMT,$/;"	e	enum:__anon13
SFE_WAV_NO_RIFF	../include/common.h	/^	SFE_WAV_NO_RIFF,$/;"	e	enum:__anon13
SFE_WAV_NO_WAVE	../include/common.h	/^	SFE_WAV_NO_WAVE,$/;"	e	enum:__anon13
SFE_WAV_PEAK_B4_FMT	../include/common.h	/^	SFE_WAV_PEAK_B4_FMT,$/;"	e	enum:__anon13
SFE_WAV_UNKNOWN_CHUNK	../include/common.h	/^	SFE_WAV_UNKNOWN_CHUNK,$/;"	e	enum:__anon13
SFE_WAV_WVPK_DATA	../include/common.h	/^	SFE_WAV_WVPK_DATA,$/;"	e	enum:__anon13
SFE_WRONG_SEEK	../include/common.h	/^	SFE_WRONG_SEEK,$/;"	e	enum:__anon13
SFE_WVE_NOT_WVE	../include/common.h	/^	SFE_WVE_NOT_WVE,$/;"	e	enum:__anon13
SFE_WVE_NO_PIPE	../include/common.h	/^	SFE_WVE_NO_PIPE,$/;"	e	enum:__anon13
SFE_XI_BAD_HEADER	../include/common.h	/^	SFE_XI_BAD_HEADER,$/;"	e	enum:__anon13
SFE_XI_EXCESS_SAMPLES	../include/common.h	/^	SFE_XI_EXCESS_SAMPLES,$/;"	e	enum:__anon13
SFE_XI_NO_PIPE	../include/common.h	/^	SFE_XI_NO_PIPE,$/;"	e	enum:__anon13
SFE_ZERO_MAJOR_FORMAT	../include/common.h	/^	SFE_ZERO_MAJOR_FORMAT,$/;"	e	enum:__anon13
SFE_ZERO_MINOR_FORMAT	../include/common.h	/^	SFE_ZERO_MINOR_FORMAT,$/;"	e	enum:__anon13
SFM_MASK	../include/common.h	151;"	d
SFM_UNMASK	../include/common.h	152;"	d
SF_ASSERT	../include/common.h	116;"	d
SF_BUFFER_LEN	../include/common.h	73;"	d
SF_CODEC	../include/common.h	128;"	d
SF_CONTAINER	../include/common.h	127;"	d
SF_ENDIAN	../include/common.h	129;"	d
SF_FILENAME_LEN	../include/common.h	74;"	d
SF_FORMAT_DWD	../include/common.h	/^	SF_FORMAT_DWD			= 0x4040000,		\/* DiamondWare Digirized *\/$/;"	e	enum:__anon3
SF_FORMAT_KRZ	../include/common.h	/^	SF_FORMAT_KRZ			= 0x40E0000,		\/* Kurzweil sampler file *\/$/;"	e	enum:__anon3
SF_FORMAT_PCM_N	../include/common.h	/^	SF_FORMAT_PCM_N			= 0x1030$/;"	e	enum:__anon3
SF_FORMAT_REX	../include/common.h	/^	SF_FORMAT_REX			= 0x40A0000,		\/* Propellorheads Rex\/Rcy *\/$/;"	e	enum:__anon3
SF_FORMAT_REX2	../include/common.h	/^	SF_FORMAT_REX2			= 0x40D0000,		\/* Propellorheads Rex2 *\/$/;"	e	enum:__anon3
SF_FORMAT_SHN	../include/common.h	/^	SF_FORMAT_SHN			= 0x4110000,		\/* Shorten. *\/$/;"	e	enum:__anon3
SF_FORMAT_SVX_EXP	../include/common.h	/^	SF_FORMAT_SVX_EXP		= 0x1021, 		\/* SVX Exponential Delta encoding. *\/$/;"	e	enum:__anon3
SF_FORMAT_SVX_FIB	../include/common.h	/^	SF_FORMAT_SVX_FIB		= 0x1020, 		\/* SVX Fibonacci Delta encoding. *\/$/;"	e	enum:__anon3
SF_FORMAT_TXW	../include/common.h	/^	SF_FORMAT_TXW			= 0x4030000,		\/* Yamaha TX16 sampler file *\/$/;"	e	enum:__anon3
SF_FORMAT_WMA	../include/common.h	/^	SF_FORMAT_WMA			= 0x4100000,		\/* Windows Media Audio. *\/$/;"	e	enum:__anon3
SF_HEADER_LEN	../include/common.h	78;"	d
SF_MAX	../include/common.h	108;"	d
SF_MAX	../include/common.h	96;"	d
SF_MAX_CHANNELS	../include/common.h	113;"	d
SF_MAX_STRINGS	../include/common.h	76;"	d
SF_MIN	../include/common.h	102;"	d
SF_MIN	../include/common.h	109;"	d
SF_PEAK_END	../include/common.h	/^	SF_PEAK_END			= 43,$/;"	e	enum:__anon2
SF_PEAK_START	../include/common.h	/^	SF_PEAK_START		= 42,$/;"	e	enum:__anon2
SF_PLATFORM_S64	../include/common.h	42;"	d
SF_PLATFORM_S64	../include/common.h	44;"	d
SF_PLATFORM_S64	../include/common.h	46;"	d
SF_PLATFORM_S64	../include/common.h	48;"	d
SF_PRIVATE	../include/common.h	/^} SF_PRIVATE ;$/;"	t	typeref:struct:sf_private_tag
SF_SCALE_MAX	../include/common.h	/^	SF_SCALE_MAX		= 52,$/;"	e	enum:__anon2
SF_SCALE_MIN	../include/common.h	/^	SF_SCALE_MIN		= 53,$/;"	e	enum:__anon2
SF_STR_ALLOW_END	../include/common.h	/^	SF_STR_ALLOW_END	= 0x0200,$/;"	e	enum:__anon2
SF_STR_ALLOW_START	../include/common.h	/^	SF_STR_ALLOW_START	= 0x0100,$/;"	e	enum:__anon2
SF_STR_BUFFER_LEN	../include/common.h	77;"	d
SF_STR_LOCATE_END	../include/common.h	/^	SF_STR_LOCATE_END	= 0x0800,$/;"	e	enum:__anon2
SF_STR_LOCATE_START	../include/common.h	/^	SF_STR_LOCATE_START	= 0x0400,$/;"	e	enum:__anon2
SF_SYSERR_LEN	../include/common.h	75;"	d
SIGNED_SIZEOF	../include/common.h	89;"	d
SNDFILE_COMMON_H	../include/common.h	20;"	d
STR_DATA	../include/common.h	/^} STR_DATA ;$/;"	t	typeref:struct:__anon6
SinTable	../include/RealFFTf.h	/^   fft_type *SinTable;$/;"	m	struct:FFTParamType	access:public
SmallReverseBits	../include/RealFFTf48x.h	/^int SmallReverseBits(int bits, int numberBits);$/;"	p	signature:(int bits, int numberBits)
TableUsage	../include/RealFFTf48x.h	/^void TableUsage(int iMask);$/;"	p	signature:(int iMask)
UNUSED	../include/common.h	60;"	d
UNUSED	../include/common.h	62;"	d
UNUSED	../include/common.h	64;"	d
WARN_UNUSED	../include/common.h	68;"	d
WARN_UNUSED	../include/common.h	70;"	d
WindowFunc	../include/FFT.h	/^void WindowFunc(int whichFunction, int NumSamples, float *data);$/;"	p	signature:(int whichFunction, int NumSamples, float *data)
__EXPERIMENTAL__	../include/Experimental.h	31;"	d
__anon14::__anon15::chunk	../include/common.h	/^	{	int chunk ;$/;"	m	struct:__anon14::__anon15	access:public
__anon14::__anon15::len	../include/common.h	/^		sf_count_t len ;$/;"	m	struct:__anon14::__anon15	access:public
__anon14::__anon15::offset	../include/common.h	/^		sf_count_t offset ;$/;"	m	struct:__anon14::__anon15	access:public
__anon14::count	../include/common.h	/^	int count ;$/;"	m	struct:__anon14	access:public
__anon14::l	../include/common.h	/^	} l [100] ;$/;"	m	struct:__anon14	typeref:struct:__anon14::__anon15	access:public
__anon16::channels	../include/common.h	/^{	int channels ;$/;"	m	struct:__anon16	access:public
__anon16::endianness	../include/common.h	/^	int endianness ;$/;"	m	struct:__anon16	access:public
__anon4::position	../include/common.h	/^	sf_count_t	position ;	\/* the sample frame for the peak *\/$/;"	m	struct:__anon4	access:public
__anon4::value	../include/common.h	/^{	double		value ;		\/* signed value of peak *\/$/;"	m	struct:__anon4	access:public
__anon5::edit_number	../include/common.h	/^	unsigned int	edit_number ;$/;"	m	struct:__anon5	access:public
__anon5::peak_loc	../include/common.h	/^	int				peak_loc ;$/;"	m	struct:__anon5	access:public
__anon5::peaks	../include/common.h	/^	PEAK_POS		peaks [0] ;$/;"	m	struct:__anon5	access:public
__anon5::peaks	../include/common.h	/^	PEAK_POS		peaks [] ;$/;"	m	struct:__anon5	access:public
__anon5::timestamp	../include/common.h	/^	unsigned int	timestamp ;	\/* secs since 1\/1\/1970  *\/$/;"	m	struct:__anon5	access:public
__anon5::version	../include/common.h	/^	unsigned int	version ;	\/* version of the PEAK chunk *\/$/;"	m	struct:__anon5	access:public
__anon6::flags	../include/common.h	/^	int		flags ;$/;"	m	struct:__anon6	access:public
__anon6::str	../include/common.h	/^	char 	*str ;$/;"	m	struct:__anon6	access:public
__anon6::type	../include/common.h	/^{	int		type ;$/;"	m	struct:__anon6	access:public
__anon7::__anon10::c	../include/common.h	/^	{	char		c [SF_FILENAME_LEN \/ 4] ;$/;"	m	union:__anon7::__anon10	access:public
__anon7::__anon10::wc	../include/common.h	/^		sfwchar_t	wc [SF_FILENAME_LEN \/ 4] ;$/;"	m	union:__anon7::__anon10	access:public
__anon7::__anon8::c	../include/common.h	/^	{	char		c [SF_FILENAME_LEN] ;$/;"	m	union:__anon7::__anon8	access:public
__anon7::__anon8::wc	../include/common.h	/^		sfwchar_t	wc [SF_FILENAME_LEN] ;$/;"	m	union:__anon7::__anon8	access:public
__anon7::__anon9::c	../include/common.h	/^	{	char		c [SF_FILENAME_LEN] ;$/;"	m	union:__anon7::__anon9	access:public
__anon7::__anon9::wc	../include/common.h	/^		sfwchar_t	wc [SF_FILENAME_LEN] ;$/;"	m	union:__anon7::__anon9	access:public
__anon7::dir	../include/common.h	/^	} dir ;$/;"	m	struct:__anon7	typeref:union:__anon7::__anon9	access:public
__anon7::do_not_close_descriptor	../include/common.h	/^	int				do_not_close_descriptor ;$/;"	m	struct:__anon7	access:public
__anon7::filedes	../include/common.h	/^	int 			filedes, savedes ;$/;"	m	struct:__anon7	access:public
__anon7::handle	../include/common.h	/^	void 			*handle, *hsaved ;$/;"	m	struct:__anon7	access:public
__anon7::hsaved	../include/common.h	/^	void 			*handle, *hsaved ;$/;"	m	struct:__anon7	access:public
__anon7::mode	../include/common.h	/^	int				mode ;			\/* Open mode : SFM_READ, SFM_WRITE or SFM_RDWR. *\/$/;"	m	struct:__anon7	access:public
__anon7::name	../include/common.h	/^	} name ;$/;"	m	struct:__anon7	typeref:union:__anon7::__anon10	access:public
__anon7::path	../include/common.h	/^	} path ;$/;"	m	struct:__anon7	typeref:union:__anon7::__anon8	access:public
__anon7::savedes	../include/common.h	/^	int 			filedes, savedes ;$/;"	m	struct:__anon7	access:public
__anon7::use_wchar	../include/common.h	/^	int				use_wchar ;$/;"	m	struct:__anon7	access:public
__realfftf48x_h	../include/RealFFTf48x.h	2;"	d
__realfftf_h	../include/RealFFTf.h	2;"	d
_bitsPerSample	../include/audiofile.h	/^    unsigned int _bitsPerSample;$/;"	m	class:AudioFile	access:protected
_channelTot	../include/audiofile.h	/^    unsigned int _channelTot;$/;"	m	class:AudioFile	access:protected
_data	../include/audiofile.h	/^    SAMPLETYPE *_data;$/;"	m	class:AudioFile	access:protected
_format	../include/audiofile.h	/^    unsigned int _format;$/;"	m	class:AudioFile	access:protected
_len	../include/audiofile.h	/^    unsigned int _len;$/;"	m	class:AudioFile	access:protected
_rate	../include/audiofile.h	/^    unsigned int _rate;$/;"	m	class:AudioFile	access:protected
_sampleTot	../include/audiofile.h	/^    unsigned int _sampleTot;$/;"	m	class:AudioFile	access:protected
add_clipping	../include/common.h	/^	int				add_clipping ;$/;"	m	struct:sf_private_tag	access:public
aiff_ima_init	../include/common.h	/^int		aiff_ima_init (SF_PRIVATE *psf, int blockalign, int samplesperblock) ;$/;"	p	signature:(SF_PRIVATE *psf, int blockalign, int samplesperblock)
aiff_open	../include/common.h	/^int		aiff_open	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
alaw_init	../include/common.h	/^int		alaw_init		(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
append_snprintf	../include/common.h	/^void append_snprintf (char * dest, size_t maxlen, const char * fmt, ...) ;$/;"	p	signature:(char * dest, size_t maxlen, const char * fmt, ...)
au_open	../include/common.h	/^int		au_open		(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
audio_detect	../include/common.h	/^int audio_detect (SF_PRIVATE * psf, AUDIO_DETECT *ad, const unsigned char * data, int datalen) ;$/;"	p	signature:(SF_PRIVATE * psf, AUDIO_DETECT *ad, const unsigned char * data, int datalen)
auto_header	../include/common.h	/^	int				auto_header ;$/;"	m	struct:sf_private_tag	access:public
avr_open	../include/common.h	/^int		avr_open	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
blockwidth	../include/common.h	/^	int				blockwidth ;	\/* Size in bytes of one set of interleaved samples. *\/$/;"	m	struct:sf_private_tag	access:public
broadcast_16k	../include/common.h	/^	SF_BROADCAST_INFO_16K *broadcast_16k ;$/;"	m	struct:sf_private_tag	access:public
broadcast_var_alloc	../include/common.h	/^SF_BROADCAST_INFO_16K * broadcast_var_alloc (void) ;$/;"	p	signature:(void)
broadcast_var_get	../include/common.h	/^int		broadcast_var_get (SF_PRIVATE *psf, SF_BROADCAST_INFO * data, size_t datasize) ;$/;"	p	signature:(SF_PRIVATE *psf, SF_BROADCAST_INFO * data, size_t datasize)
broadcast_var_set	../include/common.h	/^int		broadcast_var_set (SF_PRIVATE *psf, const SF_BROADCAST_INFO * data, size_t datasize) ;$/;"	p	signature:(SF_PRIVATE *psf, const SF_BROADCAST_INFO * data, size_t datasize)
bytewidth	../include/common.h	/^	int				bytewidth ;		\/* Size in bytes of one sample (one channel). *\/$/;"	m	struct:sf_private_tag	access:public
c	../include/common.h	/^		char c [16] ;$/;"	m	union:sf_private_tag::__anon11	access:public
c	../include/common.h	/^	{	char		c [SF_FILENAME_LEN \/ 4] ;$/;"	m	union:__anon7::__anon10	access:public
c	../include/common.h	/^	{	char		c [SF_FILENAME_LEN] ;$/;"	m	union:__anon7::__anon8	access:public
c	../include/common.h	/^	{	char		c [SF_FILENAME_LEN] ;$/;"	m	union:__anon7::__anon9	access:public
caf_open	../include/common.h	/^int		caf_open	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
canary	../include/common.h	/^		} canary ;$/;"	m	struct:sf_private_tag	typeref:union:sf_private_tag::__anon11	access:public
cbuf	../include/common.h	/^		char			cbuf	[SF_BUFFER_LEN \/ sizeof (char)] ;$/;"	m	union:sf_private_tag::__anon12	access:public
channel_map	../include/common.h	/^	int				*channel_map ;$/;"	m	struct:sf_private_tag	access:public
channels	../include/common.h	/^{	int channels ;$/;"	m	struct:__anon16	access:public
chunk	../include/common.h	/^	{	int chunk ;$/;"	m	struct:__anon14::__anon15	access:public
chunks	../include/iffdigest.h	/^        IFFChunkList chunks;$/;"	m	class:IFFDigest	access:protected
ck_begin	../include/iffdigest.h	/^        inline IFFChunkIterator ck_begin() { return chunks.begin(); }$/;"	f	class:IFFDigest	access:public	signature:()
ck_begin	../include/iffdigest.h	/^        inline IFFChunkIterator ck_begin() { return subchunks.begin(); }$/;"	f	class:IFFChunk	access:public	signature:()
ck_end	../include/iffdigest.h	/^        inline IFFChunkIterator ck_end() { return chunks.end(); }$/;"	f	class:IFFDigest	access:public	signature:()
ck_end	../include/iffdigest.h	/^        inline IFFChunkIterator ck_end() { return subchunks.end(); }$/;"	f	class:IFFChunk	access:public	signature:()
ck_find	../include/iffdigest.h	/^        inline IFFChunkIterator ck_find(iff_ckid_t id) { return chunks.findChunk(id); }$/;"	f	class:IFFDigest	access:public	signature:(iff_ckid_t id)
ck_find	../include/iffdigest.h	/^        inline IFFChunkIterator ck_find(iff_ckid_t id) { return subchunks.findChunk(id); }$/;"	f	class:IFFChunk	access:public	signature:(iff_ckid_t id)
ck_findNext	../include/iffdigest.h	/^        inline IFFChunkIterator ck_findNext(IFFChunkIterator i, iff_ckid_t id) { return chunks.findNextChunk(i, id); }$/;"	f	class:IFFDigest	access:public	signature:(IFFChunkIterator i, iff_ckid_t id)
ck_findNext	../include/iffdigest.h	/^        inline IFFChunkIterator ck_findNext(IFFChunkIterator i, iff_ckid_t id) { return subchunks.findNextChunk(i, id); }$/;"	f	class:IFFChunk	access:public	signature:(IFFChunkIterator i, iff_ckid_t id)
ckid	../include/iffdigest.h	/^        iff_ckid_t ckid;$/;"	m	class:IFFChunk	access:protected
codec_close	../include/common.h	/^	int				(*codec_close)		(struct sf_private_tag*) ;$/;"	m	struct:sf_private_tag	access:public
codec_data	../include/common.h	/^	void			*codec_data ;		\/*	This is a pointer to dynamically allocated file$/;"	m	struct:sf_private_tag	access:public
command	../include/common.h	/^	int				(*command)		(struct sf_private_tag*, int command, void *data, int datasize) ;$/;"	m	struct:sf_private_tag	access:public
container_close	../include/common.h	/^	int				(*container_close)	(struct sf_private_tag*) ;$/;"	m	struct:sf_private_tag	access:public
container_data	../include/common.h	/^	void			*container_data ;	\/*	This is a pointer to dynamically allocated file$/;"	m	struct:sf_private_tag	access:public
contents	../include/iffdigest.h	/^        const char* contents;$/;"	m	class:IFFDigest	access:protected
count	../include/common.h	/^	int count ;$/;"	m	struct:__anon14	access:public
ctype	../include/iffdigest.h	/^        enum { IFF_CHUNK_DATA, IFF_CHUNK_LIST } ctype;$/;"	m	class:IFFChunk	typeref:enum:IFFChunk::__anon1	access:protected
d	../include/common.h	/^		double d [2] ;$/;"	m	union:sf_private_tag::__anon11	access:public
data	../include/iffdigest.h	/^        const char* data;$/;"	m	class:IFFChunk	access:protected
dataPtr	../include/iffdigest.h	/^        const char* dataPtr() const { return data; }$/;"	f	class:IFFChunk	access:public	signature:() const
data_endswap	../include/common.h	/^	int				data_endswap ;	\/* Need to endswap data? *\/$/;"	m	struct:sf_private_tag	access:public
dataend	../include/common.h	/^	sf_count_t		dataend ;		\/* Offset to file tailer. *\/$/;"	m	struct:sf_private_tag	access:public
datalength	../include/common.h	/^	sf_count_t		datalength ;	\/* Length in bytes of the audio data. *\/$/;"	m	struct:sf_private_tag	access:public
dataoffset	../include/common.h	/^	sf_count_t		dataoffset ;	\/* Offset in number of bytes from beginning of file. *\/$/;"	m	struct:sf_private_tag	access:public
dbuf	../include/common.h	/^	{	double			dbuf	[SF_BUFFER_LEN \/ sizeof (double)] ;$/;"	m	union:sf_private_tag::__anon12	access:public
dir	../include/common.h	/^	} dir ;$/;"	m	struct:__anon7	typeref:union:__anon7::__anon9	access:public
dither	../include/common.h	/^	void			*dither ;$/;"	m	struct:sf_private_tag	access:public
dither_init	../include/common.h	/^int 	dither_init		(SF_PRIVATE *psf, int mode) ;$/;"	p	signature:(SF_PRIVATE *psf, int mode)
do_not_close_descriptor	../include/common.h	/^	int				do_not_close_descriptor ;$/;"	m	struct:__anon7	access:public
double64_be_read	../include/common.h	/^double	double64_be_read	(unsigned char *cptr) ;$/;"	p	signature:(unsigned char *cptr)
double64_be_write	../include/common.h	/^void	double64_be_write	(double in, unsigned char *out) ;$/;"	p	signature:(double in, unsigned char *out)
double64_init	../include/common.h	/^int		double64_init	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
double64_le_read	../include/common.h	/^double	double64_le_read	(unsigned char *cptr) ;$/;"	p	signature:(unsigned char *cptr)
double64_le_write	../include/common.h	/^void	double64_le_write	(double in, unsigned char *out) ;$/;"	p	signature:(double in, unsigned char *out)
dwd_open	../include/common.h	/^int		dwd_open	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
dwvw_init	../include/common.h	/^int		dwvw_init		(SF_PRIVATE *psf, int bitwidth) ;$/;"	p	signature:(SF_PRIVATE *psf, int bitwidth)
edit_number	../include/common.h	/^	unsigned int	edit_number ;$/;"	m	struct:__anon5	access:public
endian	../include/common.h	/^	int				endian ;		\/* File endianness : SF_ENDIAN_LITTLE or SF_ENDIAN_BIG. *\/$/;"	m	struct:sf_private_tag	access:public
endianness	../include/common.h	/^	int endianness ;$/;"	m	struct:__anon16	access:public
error	../include/common.h	/^	int				error ;$/;"	m	struct:sf_private_tag	access:public
extractData	../include/audiofile.h	/^    void extractData(IFFDigest& iff, IFFChunkIterator i);$/;"	p	class:AudioFile	access:public	signature:(IFFDigest& iff, IFFChunkIterator i)
extractHeader	../include/audiofile.h	/^    void extractHeader(IFFDigest& iff, IFFChunkIterator i);$/;"	p	class:AudioFile	access:public	signature:(IFFDigest& iff, IFFChunkIterator i)
fbuf	../include/common.h	/^		float			fbuf	[SF_BUFFER_LEN \/ sizeof (float)] ;$/;"	m	union:sf_private_tag::__anon12	access:public
fft_type	../include/RealFFTf.h	4;"	d
fft_type	../include/RealFFTf48x.h	4;"	d
fid	../include/iffdigest.h	/^        iff_ckid_t fid;$/;"	m	class:IFFDigest	access:protected
file	../include/common.h	/^	PSF_FILE		file, rsrc ;$/;"	m	struct:sf_private_tag	access:public
filedes	../include/common.h	/^	int 			filedes, savedes ;$/;"	m	struct:__anon7	access:public
filelength	../include/common.h	/^	sf_count_t		filelength ;	\/* Overall length of (embedded) file. *\/$/;"	m	struct:sf_private_tag	access:public
fileoffset	../include/common.h	/^	sf_count_t		fileoffset ;	\/* Offset in number of bytes from beginning of file. *\/$/;"	m	struct:sf_private_tag	access:public
findChunk	../include/iffdigest.h	/^        IFFChunkIterator findChunk(iff_ckid_t ckid);$/;"	p	class:IFFChunkList	access:public	signature:(iff_ckid_t ckid)
findNextChunk	../include/iffdigest.h	/^        IFFChunkIterator findNextChunk(IFFChunkIterator from, iff_ckid_t ckid);$/;"	p	class:IFFChunkList	access:public	signature:(IFFChunkIterator from, iff_ckid_t ckid)
flac_init	../include/common.h	/^int		flac_init		(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
flac_open	../include/common.h	/^int		flac_open	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
flags	../include/common.h	/^	int		flags ;$/;"	m	struct:__anon6	access:public
float32_be_read	../include/common.h	/^float	float32_be_read		(unsigned char *cptr) ;$/;"	p	signature:(unsigned char *cptr)
float32_be_write	../include/common.h	/^void	float32_be_write	(float in, unsigned char *out) ;$/;"	p	signature:(float in, unsigned char *out)
float32_init	../include/common.h	/^int		float32_init	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
float32_le_read	../include/common.h	/^float	float32_le_read		(unsigned char *cptr) ;$/;"	p	signature:(unsigned char *cptr)
float32_le_write	../include/common.h	/^void	float32_le_write	(float in, unsigned char *out) ;$/;"	p	signature:(float in, unsigned char *out)
float_int_mult	../include/common.h	/^	int				float_int_mult ;$/;"	m	struct:sf_private_tag	access:public
float_max	../include/common.h	/^	float			float_max ;$/;"	m	struct:sf_private_tag	access:public
format_desc	../include/common.h	/^	char			*format_desc ;$/;"	m	struct:sf_private_tag	access:public
ftype	../include/iffdigest.h	/^        enum IFFFormat ftype;$/;"	m	class:IFFDigest	typeref:enum:IFFDigest::IFFFormat	access:protected
g72x_init	../include/common.h	/^int		g72x_init 		(SF_PRIVATE * psf) ;$/;"	p	signature:(SF_PRIVATE * psf)
getBuffer	../include/audiofile.h	/^    SAMPLETYPE *getBuffer() { return _data; }$/;"	f	class:AudioFile	access:public	signature:()
getPowerOf2Ceiling	../include/audiofile.h	/^    unsigned int getPowerOf2Ceiling(unsigned int val);$/;"	p	class:AudioFile	access:protected	signature:(unsigned int val)
getSampleTot	../include/audiofile.h	/^    unsigned int getSampleTot() { return _sampleTot; }$/;"	f	class:AudioFile	access:public	signature:()
gsm610_init	../include/common.h	/^int		gsm610_init		(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
handle	../include/common.h	/^	void 			*handle, *hsaved ;$/;"	m	struct:__anon7	access:public
has_text	../include/common.h	/^	int				has_text ;$/;"	m	struct:sf_private_tag	access:public
have_written	../include/common.h	/^	int				have_written ;	\/* Has a single write been done to the file? *\/$/;"	m	struct:sf_private_tag	access:public
headend	../include/common.h	/^	int				headindex, headend ;$/;"	m	struct:sf_private_tag	access:public
header	../include/common.h	/^	unsigned char	header		[SF_HEADER_LEN] ; \/* Must be unsigned *\/$/;"	m	struct:sf_private_tag	access:public
headindex	../include/common.h	/^	int				headindex, headend ;$/;"	m	struct:sf_private_tag	access:public
hsaved	../include/common.h	/^	void 			*handle, *hsaved ;$/;"	m	struct:__anon7	access:public
htk_open	../include/common.h	/^int		htk_open	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
ibuf	../include/common.h	/^		int				ibuf	[SF_BUFFER_LEN \/ sizeof (int)] ;$/;"	m	union:sf_private_tag::__anon12	access:public
id	../include/iffdigest.h	/^        iff_ckid_t id() const { return ckid; }$/;"	f	class:IFFChunk	access:public	signature:() const
id	../include/iffdigest.h	/^        inline iff_ckid_t id() const { return fid; }$/;"	f	class:IFFDigest	access:public	signature:() const
id3_skip	../include/common.h	/^int id3_skip (SF_PRIVATE * psf) ;$/;"	p	signature:(SF_PRIVATE * psf)
id_str	../include/iffdigest.h	/^        const char* id_str() const { return (const char*)(&ckid); }$/;"	f	class:IFFChunk	access:public	signature:() const
id_str	../include/iffdigest.h	/^        inline const char* id_str() const { return (const char*)(&fid); }$/;"	f	class:IFFDigest	access:public	signature:() const
ieee_replace	../include/common.h	/^	int				ieee_replace ;$/;"	m	struct:sf_private_tag	access:public
iff_ckid	../include/iffdigest.h	/^static inline iff_ckid_t iff_ckid(const char* id) { return *((const int*)id); }$/;"	f	signature:(const char* id)
iff_ckid_t	../include/iffdigest.h	/^typedef unsigned int iff_ckid_t;$/;"	t
iff_s16_be	../include/iffdigest.h	/^iff_s16_be(const signed short& s) { return iff_s16_be((const char*)&s); }$/;"	f	signature:(const signed short& s)
iff_s16_be	../include/iffdigest.h	/^static inline signed short iff_s16_be(const char* ptr)$/;"	f	signature:(const char* ptr)
iff_s16_le	../include/iffdigest.h	/^iff_s16_le(const signed short& s) { return iff_s16_le((const char*)&s); }$/;"	f	signature:(const signed short& s)
iff_s16_le	../include/iffdigest.h	/^static inline signed short iff_s16_le(const char* ptr)$/;"	f	signature:(const char* ptr)
iff_s32_be	../include/iffdigest.h	/^iff_s32_be(const signed int& s) { return iff_s32_be((const char*)&s); }$/;"	f	signature:(const signed int& s)
iff_s32_be	../include/iffdigest.h	/^static inline signed int iff_s32_be(const char* ptr)$/;"	f	signature:(const char* ptr)
iff_s32_le	../include/iffdigest.h	/^iff_s32_le(const signed int& s) { return iff_s32_le((const char*)&s); }$/;"	f	signature:(const signed int& s)
iff_s32_le	../include/iffdigest.h	/^static inline signed int iff_s32_le(const char* ptr)$/;"	f	signature:(const char* ptr)
iff_u16_be	../include/iffdigest.h	/^iff_u16_be(const unsigned short& s) { return iff_u16_be((const char*)&s); }$/;"	f	signature:(const unsigned short& s)
iff_u16_be	../include/iffdigest.h	/^static inline unsigned short iff_u16_be(const char* ptr)$/;"	f	signature:(const char* ptr)
iff_u16_le	../include/iffdigest.h	/^iff_u16_le(const unsigned short& s) { return iff_u16_le((const char*)&s); }$/;"	f	signature:(const unsigned short& s)
iff_u16_le	../include/iffdigest.h	/^static inline unsigned short iff_u16_le(const char* ptr)$/;"	f	signature:(const char* ptr)
iff_u32_be	../include/iffdigest.h	/^    static inline unsigned int iff_u32_be(const char* ptr)$/;"	f	signature:(const char* ptr)
iff_u32_be	../include/iffdigest.h	/^iff_u32_be(const unsigned int& s) { return iff_u32_be((const char*)&s); }$/;"	f	signature:(const unsigned int& s)
iff_u32_le	../include/iffdigest.h	/^    static inline unsigned int iff_u32_le(const char* ptr)$/;"	f	signature:(const char* ptr)
iff_u32_le	../include/iffdigest.h	/^iff_u32_le(const unsigned int& s) { return iff_u32_le((const char*)&s); }$/;"	f	signature:(const unsigned int& s)
iffvariant	../include/iffdigest.h	/^        inline enum IFFFormat iffvariant() const { return ftype; }$/;"	f	class:IFFDigest	access:public	signature:() const
instrument	../include/common.h	/^	SF_INSTRUMENT	*instrument ;$/;"	m	struct:sf_private_tag	access:public
interleave	../include/common.h	/^	void			*interleave ;$/;"	m	struct:sf_private_tag	access:public
interleave_init	../include/common.h	/^int		interleave_init (SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
ircam_open	../include/common.h	/^int		ircam_open	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
is_pipe	../include/common.h	/^	int				is_pipe ;		\/* True if file is a pipe. *\/$/;"	m	struct:sf_private_tag	access:public
l	../include/common.h	/^	} l [100] ;$/;"	m	struct:__anon14	typeref:struct:__anon14::__anon15	access:public
last_op	../include/common.h	/^	int				last_op ;		\/* Last operation; either SFM_READ or SFM_WRITE *\/$/;"	m	struct:sf_private_tag	access:public
lbuf	../include/common.h	/^		int64_t			lbuf	[SF_BUFFER_LEN \/ sizeof (int64_t)] ;$/;"	m	union:sf_private_tag::__anon12	access:public
lbuf	../include/common.h	/^		long			lbuf	[SF_BUFFER_LEN \/ sizeof (double)] ;$/;"	m	union:sf_private_tag::__anon12	access:public
len	../include/common.h	/^		sf_count_t len ;$/;"	m	struct:__anon14::__anon15	access:public
len	../include/iffdigest.h	/^        unsigned int len() const { return length; }$/;"	f	class:IFFChunk	access:public	signature:() const
length	../include/iffdigest.h	/^        unsigned int length;$/;"	m	class:IFFChunk	access:protected
load	../include/audiofile.h	/^    void load(const char *);$/;"	p	class:AudioFile	access:public	signature:(const char *)
logbuffer	../include/common.h	/^	char			logbuffer	[SF_BUFFER_LEN] ;$/;"	m	struct:sf_private_tag	access:public
logindex	../include/common.h	/^	int				logindex ;$/;"	m	struct:sf_private_tag	access:public
loop_info	../include/common.h	/^	SF_LOOP_INFO	*loop_info ;$/;"	m	struct:sf_private_tag	access:public
macbinary3_open	../include/common.h	/^int		macbinary3_open (SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
macos_guess_file_type	../include/common.h	/^int macos_guess_file_type (SF_PRIVATE *psf, const char *filename) ;$/;"	p	signature:(SF_PRIVATE *psf, const char *filename)
make_size_t	../include/common.h	/^make_size_t (int x)$/;"	f	signature:(int x)
mat4_open	../include/common.h	/^int		mat4_open	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
mat5_open	../include/common.h	/^int		mat5_open	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
mode	../include/common.h	/^	int				mode ;			\/* Open mode : SFM_READ, SFM_WRITE or SFM_RDWR. *\/$/;"	m	struct:__anon7	access:public
mpc2k_open	../include/common.h	/^int		mpc2k_open	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
mpeg_open	../include/common.h	/^int		mpeg_open	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
name	../include/common.h	/^	} name ;$/;"	m	struct:__anon7	typeref:union:__anon7::__anon10	access:public
nist_open	../include/common.h	/^int		nist_open	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
norm_double	../include/common.h	/^	int				norm_double ;$/;"	m	struct:sf_private_tag	access:public
norm_float	../include/common.h	/^	int				norm_float ;$/;"	m	struct:sf_private_tag	access:public
offset	../include/common.h	/^		sf_count_t offset ;$/;"	m	struct:__anon14::__anon15	access:public
ogg_open	../include/common.h	/^int		ogg_open	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
operator !=	../include/iffdigest.h	/^        inline bool operator!=(const char* id) const { return ckid!=iff_ckid(id); }$/;"	f	class:IFFChunk	access:public	signature:(const char* id) const
operator !=	../include/iffdigest.h	/^        inline bool operator!=(iff_ckid_t id) const { return ckid!=id; }$/;"	f	class:IFFChunk	access:public	signature:(iff_ckid_t id) const
operator =	../include/iffdigest.h	/^        void operator=(const IFFChunk& ck);$/;"	p	class:IFFChunk	access:public	signature:(const IFFChunk& ck)
operator ==	../include/iffdigest.h	/^        inline bool operator==(const char* id) const { return ckid==iff_ckid(id); }$/;"	f	class:IFFChunk	access:public	signature:(const char* id) const
operator ==	../include/iffdigest.h	/^        inline bool operator==(iff_ckid_t id) const { return ckid==id; }$/;"	f	class:IFFChunk	access:public	signature:(iff_ckid_t id) const
paf_open	../include/common.h	/^int		paf_open	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
path	../include/common.h	/^	} path ;$/;"	m	struct:__anon7	typeref:union:__anon7::__anon8	access:public
pchk4_find	../include/common.h	/^int pchk4_find (PRIV_CHUNK4 * pchk, int marker) ;$/;"	p	signature:(PRIV_CHUNK4 * pchk, int marker)
pchk4_store	../include/common.h	/^void pchk4_store (PRIV_CHUNK4 * pchk, int marker, sf_count_t offset, sf_count_t len) ;$/;"	p	signature:(PRIV_CHUNK4 * pchk, int marker, sf_count_t offset, sf_count_t len)
pcm_init	../include/common.h	/^int		pcm_init		(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
peak_info	../include/common.h	/^	PEAK_INFO		*peak_info ;$/;"	m	struct:sf_private_tag	access:public
peak_info_calloc	../include/common.h	/^peak_info_calloc (int channels)$/;"	f	signature:(int channels)
peak_loc	../include/common.h	/^	int				peak_loc ;$/;"	m	struct:__anon5	access:public
peak_update_double	../include/common.h	/^void	peak_update_double	(SF_PRIVATE *psf, double *ptr, size_t items) ;$/;"	p	signature:(SF_PRIVATE *psf, double *ptr, size_t items)
peak_update_int	../include/common.h	/^void	peak_update_int		(SF_PRIVATE *psf, int *ptr, size_t items) ;$/;"	p	signature:(SF_PRIVATE *psf, int *ptr, size_t items)
peak_update_short	../include/common.h	/^void	peak_update_short	(SF_PRIVATE *psf, short *ptr, size_t items) ;$/;"	p	signature:(SF_PRIVATE *psf, short *ptr, size_t items)
peaks	../include/common.h	/^	PEAK_POS		peaks [0] ;$/;"	m	struct:__anon5	access:public
peaks	../include/common.h	/^	PEAK_POS		peaks [] ;$/;"	m	struct:__anon5	access:public
pipeoffset	../include/common.h	/^	sf_count_t		pipeoffset ;	\/* Number of bytes read from a pipe. *\/$/;"	m	struct:sf_private_tag	access:public
position	../include/common.h	/^	sf_count_t	position ;	\/* the sample frame for the peak *\/$/;"	m	struct:__anon4	access:public
pow2Bits	../include/RealFFTf.h	/^   int pow2Bits;$/;"	m	struct:FFTParamType	access:public
psf_asciiheader_printf	../include/common.h	/^void	psf_asciiheader_printf	(SF_PRIVATE *psf, const char *format, ...) ;$/;"	p	signature:(SF_PRIVATE *psf, const char *format, ...)
psf_binheader_readf	../include/common.h	/^int		psf_binheader_readf	(SF_PRIVATE *psf, char const *format, ...) ;$/;"	p	signature:(SF_PRIVATE *psf, char const *format, ...)
psf_binheader_writef	../include/common.h	/^int		psf_binheader_writef	(SF_PRIVATE *psf, const char *format, ...) ;$/;"	p	signature:(SF_PRIVATE *psf, const char *format, ...)
psf_calc_max_all_channels	../include/common.h	/^int		psf_calc_max_all_channels	(SF_PRIVATE *psf, double *peaks, int normalize) ;$/;"	p	signature:(SF_PRIVATE *psf, double *peaks, int normalize)
psf_calc_signal_max	../include/common.h	/^double	psf_calc_signal_max			(SF_PRIVATE *psf, int normalize) ;$/;"	p	signature:(SF_PRIVATE *psf, int normalize)
psf_close_rsrc	../include/common.h	/^int psf_close_rsrc (SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
psf_default_seek	../include/common.h	/^sf_count_t	psf_default_seek (SF_PRIVATE *psf, int mode, sf_count_t samples_from_start) ;$/;"	p	signature:(SF_PRIVATE *psf, int mode, sf_count_t samples_from_start)
psf_fclose	../include/common.h	/^int psf_fclose (SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
psf_fgets	../include/common.h	/^sf_count_t psf_fgets (char *buffer, sf_count_t bufsize, SF_PRIVATE *psf) ;$/;"	p	signature:(char *buffer, sf_count_t bufsize, SF_PRIVATE *psf)
psf_file_valid	../include/common.h	/^int psf_file_valid (SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
psf_fopen	../include/common.h	/^int psf_fopen (SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
psf_fread	../include/common.h	/^sf_count_t psf_fread (void *ptr, sf_count_t bytes, sf_count_t count, SF_PRIVATE *psf) ;$/;"	p	signature:(void *ptr, sf_count_t bytes, sf_count_t count, SF_PRIVATE *psf)
psf_fseek	../include/common.h	/^sf_count_t psf_fseek (SF_PRIVATE *psf, sf_count_t offset, int whence) ;$/;"	p	signature:(SF_PRIVATE *psf, sf_count_t offset, int whence)
psf_fsync	../include/common.h	/^void psf_fsync (SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
psf_ftell	../include/common.h	/^sf_count_t psf_ftell (SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
psf_ftruncate	../include/common.h	/^int psf_ftruncate (SF_PRIVATE *psf, sf_count_t len) ;$/;"	p	signature:(SF_PRIVATE *psf, sf_count_t len)
psf_fwrite	../include/common.h	/^sf_count_t psf_fwrite (const void *ptr, sf_count_t bytes, sf_count_t count, SF_PRIVATE *psf) ;$/;"	p	signature:(const void *ptr, sf_count_t bytes, sf_count_t count, SF_PRIVATE *psf)
psf_generate_format_desc	../include/common.h	/^void	psf_generate_format_desc (SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
psf_get_date_str	../include/common.h	/^void	psf_get_date_str (char *str, int maxlen) ;$/;"	p	signature:(char *str, int maxlen)
psf_get_filelen	../include/common.h	/^sf_count_t psf_get_filelen (SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
psf_get_format_info	../include/common.h	/^int		psf_get_format_info			(SF_FORMAT_INFO *data) ;$/;"	p	signature:(SF_FORMAT_INFO *data)
psf_get_format_major	../include/common.h	/^int		psf_get_format_major		(SF_FORMAT_INFO *data) ;$/;"	p	signature:(SF_FORMAT_INFO *data)
psf_get_format_major_count	../include/common.h	/^int		psf_get_format_major_count	(void) ;$/;"	p	signature:(void)
psf_get_format_simple	../include/common.h	/^int		psf_get_format_simple		(SF_FORMAT_INFO *data) ;$/;"	p	signature:(SF_FORMAT_INFO *data)
psf_get_format_simple_count	../include/common.h	/^int		psf_get_format_simple_count	(void) ;$/;"	p	signature:(void)
psf_get_format_subtype	../include/common.h	/^int		psf_get_format_subtype		(SF_FORMAT_INFO *data) ;$/;"	p	signature:(SF_FORMAT_INFO *data)
psf_get_format_subtype_count	../include/common.h	/^int		psf_get_format_subtype_count	(void) ;$/;"	p	signature:(void)
psf_get_max_all_channels	../include/common.h	/^int		psf_get_max_all_channels	(SF_PRIVATE *psf, double *peaks) ;$/;"	p	signature:(SF_PRIVATE *psf, double *peaks)
psf_get_signal_max	../include/common.h	/^int		psf_get_signal_max			(SF_PRIVATE *psf, double *peak) ;$/;"	p	signature:(SF_PRIVATE *psf, double *peak)
psf_get_string	../include/common.h	/^const char* psf_get_string (SF_PRIVATE *psf, int str_type) ;$/;"	p	signature:(SF_PRIVATE *psf, int str_type)
psf_hexdump	../include/common.h	/^void	psf_hexdump (const void *ptr, int len) ;$/;"	p	signature:(const void *ptr, int len)
psf_init_files	../include/common.h	/^void psf_init_files (SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
psf_instrument_alloc	../include/common.h	/^SF_INSTRUMENT * psf_instrument_alloc (void) ;$/;"	p	signature:(void)
psf_is_pipe	../include/common.h	/^int psf_is_pipe (SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
psf_isprint	../include/common.h	/^psf_isprint (int ch)$/;"	f	signature:(int ch)
psf_location_string_count	../include/common.h	/^int psf_location_string_count (const SF_PRIVATE * psf, int location) ;$/;"	p	signature:(const SF_PRIVATE * psf, int location)
psf_log_SF_INFO	../include/common.h	/^void	psf_log_SF_INFO 	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
psf_log_printf	../include/common.h	/^void	psf_log_printf		(SF_PRIVATE *psf, const char *format, ...) ;$/;"	p	signature:(SF_PRIVATE *psf, const char *format, ...)
psf_memset	../include/common.h	/^void	*psf_memset (void *s, int c, sf_count_t n) ;$/;"	p	signature:(void *s, int c, sf_count_t n)
psf_open_file	../include/common.h	/^SNDFILE * psf_open_file (SF_PRIVATE *psf, SF_INFO *sfinfo) ;$/;"	p	signature:(SF_PRIVATE *psf, SF_INFO *sfinfo)
psf_open_rsrc	../include/common.h	/^int psf_open_rsrc (SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
psf_rand_int32	../include/common.h	/^int32_t	psf_rand_int32 (void) ;$/;"	p	signature:(void)
psf_sanitize_string	../include/common.h	/^void	psf_sanitize_string (char * cptr, int len) ;$/;"	p	signature:(char * cptr, int len)
psf_set_file	../include/common.h	/^void psf_set_file (SF_PRIVATE *psf, int fd) ;$/;"	p	signature:(SF_PRIVATE *psf, int fd)
psf_set_stdio	../include/common.h	/^int psf_set_stdio (SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
psf_set_string	../include/common.h	/^int psf_set_string (SF_PRIVATE *psf, int str_type, const char *str) ;$/;"	p	signature:(SF_PRIVATE *psf, int str_type, const char *str)
psf_store_string	../include/common.h	/^int psf_store_string (SF_PRIVATE *psf, int str_type, const char *str) ;$/;"	p	signature:(SF_PRIVATE *psf, int str_type, const char *str)
psf_strlcat	../include/common.h	/^psf_strlcat (char *dest, size_t n, const char *src)$/;"	f	signature:(char *dest, size_t n, const char *src)
psf_strlcpy	../include/common.h	/^psf_strlcpy (char *dest, size_t n, const char *src)$/;"	f	signature:(char *dest, size_t n, const char *src)
psf_strlcpy_crlf	../include/common.h	/^void psf_strlcpy_crlf (char *dest, const char *src, size_t destmax, size_t srcmax) ;$/;"	p	signature:(char *dest, const char *src, size_t destmax, size_t srcmax)
psf_use_rsrc	../include/common.h	/^void psf_use_rsrc (SF_PRIVATE *psf, int on_off) ;$/;"	p	signature:(SF_PRIVATE *psf, int on_off)
pvf_open	../include/common.h	/^int		pvf_open	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
raw_open	../include/common.h	/^int		raw_open	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
read_current	../include/common.h	/^	sf_count_t		read_current ;$/;"	m	struct:sf_private_tag	access:public
read_dither	../include/common.h	/^	SF_DITHER_INFO	read_dither ;$/;"	m	struct:sf_private_tag	access:public
read_double	../include/common.h	/^	sf_count_t		(*read_double)	(struct sf_private_tag*, double *ptr, sf_count_t len) ;$/;"	m	struct:sf_private_tag	access:public
read_float	../include/common.h	/^	sf_count_t		(*read_float)	(struct sf_private_tag*, float *ptr, sf_count_t len) ;$/;"	m	struct:sf_private_tag	access:public
read_int	../include/common.h	/^	sf_count_t		(*read_int)		(struct sf_private_tag*, int *ptr, sf_count_t len) ;$/;"	m	struct:sf_private_tag	access:public
read_short	../include/common.h	/^	sf_count_t		(*read_short)	(struct sf_private_tag*, short *ptr, sf_count_t len) ;$/;"	m	struct:sf_private_tag	access:public
rf64_open	../include/common.h	/^int		rf64_open	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
rsrc	../include/common.h	/^	PSF_FILE		file, rsrc ;$/;"	m	struct:sf_private_tag	access:public
rsrclength	../include/common.h	/^	sf_count_t		rsrclength ;	\/* Length of the resource fork (if it exists). *\/$/;"	m	struct:sf_private_tag	access:public
rwf_endian	../include/common.h	/^	int				rwf_endian ;	\/* Header endian-ness flag. *\/$/;"	m	struct:sf_private_tag	access:public
rx2_open	../include/common.h	/^int		rx2_open	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
s_bitwidth_to_subformat	../include/common.h	/^int s_bitwidth_to_subformat (int bits) ;$/;"	p	signature:(int bits)
savedes	../include/common.h	/^	int 			filedes, savedes ;$/;"	m	struct:__anon7	access:public
sbuf	../include/common.h	/^		short			sbuf	[SF_BUFFER_LEN \/ sizeof (short)] ;$/;"	m	union:sf_private_tag::__anon12	access:public
scale_int_float	../include/common.h	/^	int				scale_int_float ;$/;"	m	struct:sf_private_tag	access:public
scbuf	../include/common.h	/^		signed char		scbuf	[SF_BUFFER_LEN \/ sizeof (signed char)] ;$/;"	m	union:sf_private_tag::__anon12	access:public
sd2_open	../include/common.h	/^int		sd2_open	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
sds_open	../include/common.h	/^int		sds_open	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
seek	../include/common.h	/^	sf_count_t		(*seek) 		(struct sf_private_tag*, int mode, sf_count_t samples_from_start) ;$/;"	m	struct:sf_private_tag	access:public
sf	../include/common.h	/^	SF_INFO			sf ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag	../include/common.h	/^typedef struct sf_private_tag$/;"	s
sf_private_tag::Magick	../include/common.h	/^	int				Magick ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::__anon11::c	../include/common.h	/^		char c [16] ;$/;"	m	union:sf_private_tag::__anon11	access:public
sf_private_tag::__anon11::d	../include/common.h	/^		double d [2] ;$/;"	m	union:sf_private_tag::__anon11	access:public
sf_private_tag::__anon12::cbuf	../include/common.h	/^		char			cbuf	[SF_BUFFER_LEN \/ sizeof (char)] ;$/;"	m	union:sf_private_tag::__anon12	access:public
sf_private_tag::__anon12::dbuf	../include/common.h	/^	{	double			dbuf	[SF_BUFFER_LEN \/ sizeof (double)] ;$/;"	m	union:sf_private_tag::__anon12	access:public
sf_private_tag::__anon12::fbuf	../include/common.h	/^		float			fbuf	[SF_BUFFER_LEN \/ sizeof (float)] ;$/;"	m	union:sf_private_tag::__anon12	access:public
sf_private_tag::__anon12::ibuf	../include/common.h	/^		int				ibuf	[SF_BUFFER_LEN \/ sizeof (int)] ;$/;"	m	union:sf_private_tag::__anon12	access:public
sf_private_tag::__anon12::lbuf	../include/common.h	/^		int64_t			lbuf	[SF_BUFFER_LEN \/ sizeof (int64_t)] ;$/;"	m	union:sf_private_tag::__anon12	access:public
sf_private_tag::__anon12::lbuf	../include/common.h	/^		long			lbuf	[SF_BUFFER_LEN \/ sizeof (double)] ;$/;"	m	union:sf_private_tag::__anon12	access:public
sf_private_tag::__anon12::sbuf	../include/common.h	/^		short			sbuf	[SF_BUFFER_LEN \/ sizeof (short)] ;$/;"	m	union:sf_private_tag::__anon12	access:public
sf_private_tag::__anon12::scbuf	../include/common.h	/^		signed char		scbuf	[SF_BUFFER_LEN \/ sizeof (signed char)] ;$/;"	m	union:sf_private_tag::__anon12	access:public
sf_private_tag::__anon12::ucbuf	../include/common.h	/^		unsigned char	ucbuf	[SF_BUFFER_LEN \/ sizeof (signed char)] ;$/;"	m	union:sf_private_tag::__anon12	access:public
sf_private_tag::add_clipping	../include/common.h	/^	int				add_clipping ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::auto_header	../include/common.h	/^	int				auto_header ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::blockwidth	../include/common.h	/^	int				blockwidth ;	\/* Size in bytes of one set of interleaved samples. *\/$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::broadcast_16k	../include/common.h	/^	SF_BROADCAST_INFO_16K *broadcast_16k ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::bytewidth	../include/common.h	/^	int				bytewidth ;		\/* Size in bytes of one sample (one channel). *\/$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::canary	../include/common.h	/^		} canary ;$/;"	m	struct:sf_private_tag	typeref:union:sf_private_tag::__anon11	access:public
sf_private_tag::channel_map	../include/common.h	/^	int				*channel_map ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::codec_close	../include/common.h	/^	int				(*codec_close)		(struct sf_private_tag*) ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::codec_data	../include/common.h	/^	void			*codec_data ;		\/*	This is a pointer to dynamically allocated file$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::command	../include/common.h	/^	int				(*command)		(struct sf_private_tag*, int command, void *data, int datasize) ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::container_close	../include/common.h	/^	int				(*container_close)	(struct sf_private_tag*) ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::container_data	../include/common.h	/^	void			*container_data ;	\/*	This is a pointer to dynamically allocated file$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::data_endswap	../include/common.h	/^	int				data_endswap ;	\/* Need to endswap data? *\/$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::dataend	../include/common.h	/^	sf_count_t		dataend ;		\/* Offset to file tailer. *\/$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::datalength	../include/common.h	/^	sf_count_t		datalength ;	\/* Length in bytes of the audio data. *\/$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::dataoffset	../include/common.h	/^	sf_count_t		dataoffset ;	\/* Offset in number of bytes from beginning of file. *\/$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::dither	../include/common.h	/^	void			*dither ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::endian	../include/common.h	/^	int				endian ;		\/* File endianness : SF_ENDIAN_LITTLE or SF_ENDIAN_BIG. *\/$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::error	../include/common.h	/^	int				error ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::file	../include/common.h	/^	PSF_FILE		file, rsrc ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::filelength	../include/common.h	/^	sf_count_t		filelength ;	\/* Overall length of (embedded) file. *\/$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::fileoffset	../include/common.h	/^	sf_count_t		fileoffset ;	\/* Offset in number of bytes from beginning of file. *\/$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::float_int_mult	../include/common.h	/^	int				float_int_mult ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::float_max	../include/common.h	/^	float			float_max ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::format_desc	../include/common.h	/^	char			*format_desc ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::has_text	../include/common.h	/^	int				has_text ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::have_written	../include/common.h	/^	int				have_written ;	\/* Has a single write been done to the file? *\/$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::headend	../include/common.h	/^	int				headindex, headend ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::header	../include/common.h	/^	unsigned char	header		[SF_HEADER_LEN] ; \/* Must be unsigned *\/$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::headindex	../include/common.h	/^	int				headindex, headend ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::ieee_replace	../include/common.h	/^	int				ieee_replace ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::instrument	../include/common.h	/^	SF_INSTRUMENT	*instrument ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::interleave	../include/common.h	/^	void			*interleave ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::is_pipe	../include/common.h	/^	int				is_pipe ;		\/* True if file is a pipe. *\/$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::last_op	../include/common.h	/^	int				last_op ;		\/* Last operation; either SFM_READ or SFM_WRITE *\/$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::logbuffer	../include/common.h	/^	char			logbuffer	[SF_BUFFER_LEN] ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::logindex	../include/common.h	/^	int				logindex ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::loop_info	../include/common.h	/^	SF_LOOP_INFO	*loop_info ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::norm_double	../include/common.h	/^	int				norm_double ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::norm_float	../include/common.h	/^	int				norm_float ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::peak_info	../include/common.h	/^	PEAK_INFO		*peak_info ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::pipeoffset	../include/common.h	/^	sf_count_t		pipeoffset ;	\/* Number of bytes read from a pipe. *\/$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::read_current	../include/common.h	/^	sf_count_t		read_current ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::read_dither	../include/common.h	/^	SF_DITHER_INFO	read_dither ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::read_double	../include/common.h	/^	sf_count_t		(*read_double)	(struct sf_private_tag*, double *ptr, sf_count_t len) ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::read_float	../include/common.h	/^	sf_count_t		(*read_float)	(struct sf_private_tag*, float *ptr, sf_count_t len) ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::read_int	../include/common.h	/^	sf_count_t		(*read_int)		(struct sf_private_tag*, int *ptr, sf_count_t len) ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::read_short	../include/common.h	/^	sf_count_t		(*read_short)	(struct sf_private_tag*, short *ptr, sf_count_t len) ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::rsrc	../include/common.h	/^	PSF_FILE		file, rsrc ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::rsrclength	../include/common.h	/^	sf_count_t		rsrclength ;	\/* Length of the resource fork (if it exists). *\/$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::rwf_endian	../include/common.h	/^	int				rwf_endian ;	\/* Header endian-ness flag. *\/$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::scale_int_float	../include/common.h	/^	int				scale_int_float ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::seek	../include/common.h	/^	sf_count_t		(*seek) 		(struct sf_private_tag*, int mode, sf_count_t samples_from_start) ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::sf	../include/common.h	/^	SF_INFO			sf ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::str_end	../include/common.h	/^	char			*str_end ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::str_flags	../include/common.h	/^	int				str_flags ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::str_storage	../include/common.h	/^	char			str_storage [SF_STR_BUFFER_LEN] ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::strings	../include/common.h	/^	STR_DATA		strings [SF_MAX_STRINGS] ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::syserr	../include/common.h	/^	char			syserr		[SF_SYSERR_LEN] ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::u	../include/common.h	/^		} u ;$/;"	m	struct:sf_private_tag	typeref:union:sf_private_tag::__anon12	access:public
sf_private_tag::unique_id	../include/common.h	/^	unsigned		unique_id ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::vio	../include/common.h	/^	SF_VIRTUAL_IO		vio ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::vio_user_data	../include/common.h	/^	void				*vio_user_data ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::virtual_io	../include/common.h	/^	int					virtual_io ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::write_current	../include/common.h	/^	sf_count_t		write_current ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::write_dither	../include/common.h	/^	SF_DITHER_INFO	write_dither ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::write_double	../include/common.h	/^	sf_count_t		(*write_double)	(struct sf_private_tag*, const double *ptr, sf_count_t len) ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::write_float	../include/common.h	/^	sf_count_t		(*write_float)	(struct sf_private_tag*, const float *ptr, sf_count_t len) ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::write_header	../include/common.h	/^	int				(*write_header)	(struct sf_private_tag*, int calc_length) ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::write_int	../include/common.h	/^	sf_count_t		(*write_int)	(struct sf_private_tag*, const int *ptr, sf_count_t len) ;$/;"	m	struct:sf_private_tag	access:public
sf_private_tag::write_short	../include/common.h	/^	sf_count_t		(*write_short)	(struct sf_private_tag*, const short *ptr, sf_count_t len) ;$/;"	m	struct:sf_private_tag	access:public
sfwchar_t	../include/common.h	/^typedef int16_t sfwchar_t ;$/;"	t
sfwchar_t	../include/common.h	/^typedef wchar_t	sfwchar_t ;$/;"	t
str	../include/common.h	/^	char 	*str ;$/;"	m	struct:__anon6	access:public
str_end	../include/common.h	/^	char			*str_end ;$/;"	m	struct:sf_private_tag	access:public
str_flags	../include/common.h	/^	int				str_flags ;$/;"	m	struct:sf_private_tag	access:public
str_of_endianness	../include/common.h	/^const char * str_of_endianness (int end) ;$/;"	p	signature:(int end)
str_of_major_format	../include/common.h	/^const char * str_of_major_format (int format) ;$/;"	p	signature:(int format)
str_of_minor_format	../include/common.h	/^const char * str_of_minor_format (int format) ;$/;"	p	signature:(int format)
str_of_open_mode	../include/common.h	/^const char * str_of_open_mode (int mode) ;$/;"	p	signature:(int mode)
str_storage	../include/common.h	/^	char			str_storage [SF_STR_BUFFER_LEN] ;$/;"	m	struct:sf_private_tag	access:public
strings	../include/common.h	/^	STR_DATA		strings [SF_MAX_STRINGS] ;$/;"	m	struct:sf_private_tag	access:public
subchunks	../include/iffdigest.h	/^        IFFChunkList subchunks;$/;"	m	class:IFFChunk	access:protected
subformat_to_bytewidth	../include/common.h	/^int subformat_to_bytewidth (int format) ;$/;"	p	signature:(int format)
svx_open	../include/common.h	/^int		svx_open	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
syserr	../include/common.h	/^	char			syserr		[SF_SYSERR_LEN] ;$/;"	m	struct:sf_private_tag	access:public
timestamp	../include/common.h	/^	unsigned int	timestamp ;	\/* secs since 1\/1\/1970  *\/$/;"	m	struct:__anon5	access:public
tnull	../include/iffdigest.h	/^        char tnull; \/\/ terminating null for id$/;"	m	class:IFFChunk	access:protected
tnull	../include/iffdigest.h	/^        char tnull;$/;"	m	class:IFFDigest	access:protected
txw_open	../include/common.h	/^int		txw_open	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
type	../include/common.h	/^{	int		type ;$/;"	m	struct:__anon6	access:public
u	../include/common.h	/^		} u ;$/;"	m	struct:sf_private_tag	typeref:union:sf_private_tag::__anon12	access:public
u_bitwidth_to_subformat	../include/common.h	/^int u_bitwidth_to_subformat (int bits) ;$/;"	p	signature:(int bits)
ucbuf	../include/common.h	/^		unsigned char	ucbuf	[SF_BUFFER_LEN \/ sizeof (signed char)] ;$/;"	m	union:sf_private_tag::__anon12	access:public
ulaw_init	../include/common.h	/^int		ulaw_init		(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
unique_id	../include/common.h	/^	unsigned		unique_id ;$/;"	m	struct:sf_private_tag	access:public
use_wchar	../include/common.h	/^	int				use_wchar ;$/;"	m	struct:__anon7	access:public
valid	../include/iffdigest.h	/^        inline bool valid() const { return ftype != IFF_FMT_ERROR; }$/;"	f	class:IFFDigest	access:public	signature:() const
value	../include/common.h	/^{	double		value ;		\/* signed value of peak *\/$/;"	m	struct:__anon4	access:public
version	../include/common.h	/^	unsigned int	version ;	\/* version of the PEAK chunk *\/$/;"	m	struct:__anon5	access:public
vio	../include/common.h	/^	SF_VIRTUAL_IO		vio ;$/;"	m	struct:sf_private_tag	access:public
vio_user_data	../include/common.h	/^	void				*vio_user_data ;$/;"	m	struct:sf_private_tag	access:public
virtual_io	../include/common.h	/^	int					virtual_io ;$/;"	m	struct:sf_private_tag	access:public
voc_open	../include/common.h	/^int		voc_open	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
vox_adpcm_init	../include/common.h	/^int		vox_adpcm_init	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
w64_open	../include/common.h	/^int		w64_open	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
wav_open	../include/common.h	/^int		wav_open	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
wav_w64_ima_init	../include/common.h	/^int		wav_w64_ima_init (SF_PRIVATE *psf, int blockalign, int samplesperblock) ;$/;"	p	signature:(SF_PRIVATE *psf, int blockalign, int samplesperblock)
wav_w64_msadpcm_init	../include/common.h	/^int		wav_w64_msadpcm_init (SF_PRIVATE *psf, int blockalign, int samplesperblock) ;$/;"	p	signature:(SF_PRIVATE *psf, int blockalign, int samplesperblock)
wc	../include/common.h	/^		sfwchar_t	wc [SF_FILENAME_LEN \/ 4] ;$/;"	m	union:__anon7::__anon10	access:public
wc	../include/common.h	/^		sfwchar_t	wc [SF_FILENAME_LEN] ;$/;"	m	union:__anon7::__anon8	access:public
wc	../include/common.h	/^		sfwchar_t	wc [SF_FILENAME_LEN] ;$/;"	m	union:__anon7::__anon9	access:public
write_current	../include/common.h	/^	sf_count_t		write_current ;$/;"	m	struct:sf_private_tag	access:public
write_dither	../include/common.h	/^	SF_DITHER_INFO	write_dither ;$/;"	m	struct:sf_private_tag	access:public
write_double	../include/common.h	/^	sf_count_t		(*write_double)	(struct sf_private_tag*, const double *ptr, sf_count_t len) ;$/;"	m	struct:sf_private_tag	access:public
write_float	../include/common.h	/^	sf_count_t		(*write_float)	(struct sf_private_tag*, const float *ptr, sf_count_t len) ;$/;"	m	struct:sf_private_tag	access:public
write_header	../include/common.h	/^	int				(*write_header)	(struct sf_private_tag*, int calc_length) ;$/;"	m	struct:sf_private_tag	access:public
write_int	../include/common.h	/^	sf_count_t		(*write_int)	(struct sf_private_tag*, const int *ptr, sf_count_t len) ;$/;"	m	struct:sf_private_tag	access:public
write_short	../include/common.h	/^	sf_count_t		(*write_short)	(struct sf_private_tag*, const short *ptr, sf_count_t len) ;$/;"	m	struct:sf_private_tag	access:public
wve_open	../include/common.h	/^int		wve_open	(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
xi_open	../include/common.h	/^int		xi_open		(SF_PRIVATE *psf) ;$/;"	p	signature:(SF_PRIVATE *psf)
~AudioFile	../include/audiofile.h	/^    ~AudioFile()$/;"	f	class:AudioFile	access:public	signature:()
